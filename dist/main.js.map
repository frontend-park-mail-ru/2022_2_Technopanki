{"version":3,"file":"main.js","mappings":"qSAwBO,IAAeA,EAAtB,GAaI,WAAYC,EAAwBC,I,4FAAyB,SACzDC,KAAKF,MAAQA,EACbE,KAAKD,QAAUA,CAClB,ICrCQE,EAAiB,OACjBC,EAAmB,SACnBC,EAAoB,UACpBC,EAAmB,SACnBC,EAAmB,SAEnBC,EAAO,iBAAkB,CAClCC,KAAMN,EADU,EAIPO,EAAS,SAClBC,EACAC,GAFkB,MAGL,CACbH,KAAML,EACNO,YAAAA,EACAC,gBAAAA,EANkB,EASTC,EAAU,SAACC,GAAD,MAAyB,CAC5CL,KAAMJ,EACNU,KAAMD,EAFa,EAKVE,EAAS,iBAAO,CACzBP,KAAMH,EADY,EAITW,EAAS,SAACF,GAAD,MAAsB,CACxCN,KAAMF,EACNQ,KAAAA,EAFkB,EASTG,EAAoC,CAC7CF,OAAQ,GACRG,IAAK,GACLT,OAAQ,ICxCCU,EAAaC,OAAO,OAEpBC,EAAqBD,OAAM,IAAK,OAChCE,EAA2BF,OAAM,IAAK,aCM7CG,GDL6BH,OAAM,IAAK,QACRA,OAAM,IAAK,WACVA,OAAM,IAAK,YACXA,OAAM,IAAK,YCE3B,SACnBI,EACAC,EACAC,GAEA,KAAOD,EAAY,IAAMA,EAAY,GAAG,KAAOC,GAC3CF,EAAWG,KAAKZ,KAChBU,EAAYG,OAEnB,GASKC,EAAiB,SACnBL,EACAM,EACAJ,GAEA,KAAOI,EAAY,IAAMA,EAAY,GAAG,KAAOJ,GAC3CF,EAAWG,KAAKX,EAAOc,EAAY,GAAG,KACtCA,EAAYF,OAEnB,EAIKG,EAAoB,SACtBC,EACAC,GAEA,IAAMC,EAAkBF,EAAoBG,KAAI,SAAArB,GAAI,OAAIA,EAAK,EAAT,IAC9CsB,EAAkBH,EAAoBE,KAAI,SAAArB,GAAI,OAAIA,EAAK,EAAT,IAEpD,OAAOoB,EAAgBG,MAAK,SAAAC,GAAC,OAAoC,IAAhCF,EAAgBG,QAAQD,EAA5B,KAA0C,IAC1E,EAQYE,EAAe,SACxBf,EACAK,GAgBA,IAdA,IAAMN,EAA0B,GAE1BQ,EAAsBP,EAAYU,KACpC,SAACrB,GAAD,MAA2C,CAACA,EAAKY,IAAKZ,EAAtD,IAEEmB,EAAsBH,EAAYK,KACpC,SAACrB,GAAD,MAA2C,CAACA,EAAKY,IAAKZ,EAAtD,IAGA2B,EAAgBV,EAChBC,EACAC,GAGGQ,GACHlB,EAAeC,EAAYQ,EAAqBS,GAChDZ,EAAeL,EAAYS,EAAqBQ,GAEhDjB,EAAWG,KACPe,EAEIV,EAAoBJ,QAAQ,GAE5BK,EAAoBL,QAAQ,KAIpCa,EAAgBV,EACZC,EACAC,GAOR,OAHAV,EAAeC,EAAYQ,EAAqBS,GAChDZ,EAAeL,EAAYS,EAAqBQ,GAEzCjB,CACV,E,qnDCrFD,IAAMmB,EAAoB,SACtBC,EACAC,GAEA,IAAMC,EAAyBC,OAAOC,QAAQJ,GAAcK,QACxD,yBAAEC,EAAF,iBAAwB,aAATA,CAAf,IAEEC,EAAyBJ,OAAOC,QAAQH,GAAcI,QACxD,yBAAEC,EAAF,iBAAwB,aAATA,CAAf,IAGEE,EAAmBN,EAAuBX,KAAI,yBAAEe,EAAF,iBAAeA,CAAf,IAC9CG,EAAmBF,EAAuBhB,KAAI,yBAAEe,EAAF,iBAAeA,CAAf,IAEpD,MAAO,CACHhC,IAAKiC,EAAuBF,QACxB,yBAAEC,EAAF,kBAAmD,IAApCE,EAAiBb,QAAQW,EAAxC,IAEJnC,OAAQqC,EAAiBH,QACrB,SAAAC,GAAI,OAAwC,IAApCG,EAAiBd,QAAQW,EAA7B,IAERzC,OAAQ0C,EAAuBF,QAC3B,yBAAEC,EAAF,KAAQI,EAAR,YACwC,IAApCF,EAAiBb,QAAQW,IACzBE,EAAiBf,MACb,SAAAvB,GAAI,OAAIA,EAAK,KAAOoC,GAAQpC,EAAK,KAAOwC,CAApC,GAHZ,IAOX,EA6CKC,EAAc,SAChB7C,EACA8C,EACAC,GAEA,OAAOhD,EAAOC,EAAa,CAACgC,EAAWc,EAAUC,IACpD,EASYf,EAAa,SAAbA,EACTgB,EACA7C,GAEA,GAAI6C,EAAQC,WAAa9C,EAAQ8C,SAC7B,OAAO/C,EAAQC,GAGnB,GACI6C,EAAQC,WAAatC,GACrBR,EAAQ8C,WAAatC,EACvB,CACE,IAAMuC,EAAajB,EAAkBe,EAAQ3D,MAAOc,EAAQd,OAW5D,OAjFwB,SAC5B2D,EACA7C,GAEA,OACM6C,EAAQ3D,MAAM8D,WAAaH,EAAQ3D,MAAM8D,UACR,iBAA3BH,EAAQ3D,MAAM8D,UACgB,iBAA3BhD,EAAQd,MAAM8D,QAEhC,CAwEWC,CAAwBJ,EAAS7C,GAtER,SACjC6C,EACA7C,GAEA,OAAK6C,EAAQ3D,MAAM8D,UAAahD,EAAQd,MAAM8D,UAElCH,EAAQ3D,MAAM8D,UAAYhD,EAAQd,MAAM8D,SACzC7C,EAAOH,GACP6C,EAAQ3D,MAAM8D,WAAahD,EAAQd,MAAM8D,SACzC9C,IAI2B,iBAA3B2C,EAAQ3D,MAAM8D,UACa,iBAA3BhD,EAAQd,MAAM8D,SAEjBH,EAAQ3D,MAAM8D,WAAahD,EAAQd,MAAM8D,SAClCtD,IAEAE,EAAO,EAAD,KAEFQ,GAFE,IAGLR,OAAQ,CAAC,CAAC,cAAeI,EAAQd,MAAM8D,aAE3C,IAKLtD,IAxBIA,GAyBd,CAyCkBwD,CAA6BL,EAAS7C,GAI5CmD,MAAMC,QAAQP,EAAQ3D,MAAM8D,WAC5BG,MAAMC,QAAQpD,EAAQd,MAAM8D,UAU1BpD,EACHmD,EACApB,EAEIwB,MAAMC,QAAQP,EAAQ3D,MAAM8D,UACtBH,EAAQ3D,MAAM8D,SACd,CAACH,EAAQ3D,MAAM8D,UACrBG,MAAMC,QAAQpD,EAAQd,MAAM8D,UACtBhD,EAAQd,MAAM8D,SACd,CAAChD,EAAQd,MAAM8D,YAjBlBN,EACHK,EAEAF,EAAQ3D,MAAM8D,SACdhD,EAAQd,MAAM8D,SAgBzB,CAAM,GACHH,EAAQC,SAASO,cAAgB5C,EAAyB4C,aAC1DrD,EAAQ8C,SAASO,cAAgB5C,EAAyB4C,YAC5D,CAEE,GADAC,QAAQC,IAAI,SAAUV,EAAS7C,GAC3B6C,EAAQlD,OAASK,EAAQL,KACzB,OAAOI,EAAQC,GAEf,IAAM+C,EAAajB,EAAkBe,EAAQ3D,MAAOc,EAAQd,OAC5D,OACKiE,MAAMC,QAAQP,EAAQ3D,MAAM8D,WAC5BG,MAAMC,QAAQpD,EAAQd,MAAM8D,UAO1BpD,EACHmD,EACApB,EAEIwB,MAAMC,QAAQP,EAAQ3D,MAAM8D,UACtBH,EAAQ3D,MAAM8D,SACd,CAACH,EAAQ3D,MAAM8D,UACrBG,MAAMC,QAAQpD,EAAQd,MAAM8D,UACtBhD,EAAQd,MAAM8D,SACd,CAAChD,EAAQd,MAAM8D,YAdlBpD,EAAOmD,EAAY,CAEtBlB,EAAWgB,EAAQ3D,MAAM8D,SAAUhD,EAAQd,MAAM8D,WAgBhE,CAEG,OAAOnB,EAAWgB,EAAQ3D,MAAM8D,SAAUhD,EAAQd,MAAM8D,SAI/D,ECnLYQ,EAAgB,SAACC,EAAsBvE,GAChD,IAAK,IAAImD,KAAQnD,EACA,aAATmD,IAEAoB,EAAQpB,GAAQnD,EAAMmD,GAGjC,EAGKqB,EAAiB,SAACD,EAAsBT,GACtCA,IACwB,iBAAbA,EACPS,EAAQE,UAAYX,EACbG,MAAMC,QAAQJ,GACrBA,EAASY,SAAQ,SAAC3D,GACd4D,EAAWJ,EAASxD,EACvB,IAGD4D,EAAWJ,EAAST,GAG/B,EAkCYa,EAAa,SAACC,EAAmB7D,GACtCA,EAAK6C,WAAatC,EAElBsD,EAAKC,YAnCY,SAAC9D,GACtB,IAAMwD,EAAUO,SAASC,cAAchE,EAAKN,MAQ5C,OAPAM,EAAKiE,YAAcT,EAEnBD,EAAcC,EAASxD,EAAKf,OACxBe,EAAKf,MAAM8D,UACXU,EAAeD,EAASxD,EAAKf,MAAM8D,UAGhCS,CACV,CAyBwBU,CAAiBlE,IAC3BA,EAAK6C,WAAarC,EAxBT,SACpBqD,EACA7D,GAEA,IAAMmE,EAAW,IAAInE,EAAKN,KAAKM,EAAKf,OAGpCe,EAAKiE,YAAcJ,EACnBM,EAASC,WAAaP,EACtBM,EAASE,mBAAqBF,EAASG,SAEvCV,EAAWC,EAAMM,EAASE,mBAE7B,CAaOE,CAAgBV,EAAM7D,GAElBA,EAAKf,MAAM8D,UACXU,EAAeI,EAAM7D,EAAKf,MAAM8D,SAG3C,EC/EYyB,EAAmB,SAC5BC,EACAC,GAEA,IAAMlB,EAAUO,SAASC,cAAcS,GAEvC,OADAlB,EAAcC,EAASkB,GAChBlB,CACV,E,87BCOD,IAqCamB,EAAY,SAACnB,EAAsBoB,GAC5C,GAAIA,EAAUlF,OAASN,EAAvB,CAIA,GAAIwF,EAAUlF,OAASJ,EAqBvB,OAfIsF,EAAUlF,OAASL,IAvCK,SAC5BmE,EACAoB,GAMAA,EAAUhF,YAAYQ,IAAIuD,SAEtB,yBAAEvB,EAAF,KAAQI,EAAR,YAAmBgB,EAAQqB,aAAazC,EAAMI,EAA9C,IAEJoC,EAAUhF,YAAYD,OAAOgE,SAEzB,yBAAEvB,EAAF,KAAQI,EAAR,YAAoBgB,EAAQpB,GAAQI,CAApC,IAEJoC,EAAUhF,YAAYK,OAAO0D,SAAQ,SAAAvB,GAAI,OAAIoB,EAAQsB,gBAAgB1C,EAA5B,GAC5C,CAwBO2C,CAAwBvB,EAASoB,GAE7BA,EAAU/E,iBAEVmF,EAAkBxB,EAASoB,EAAU/E,kBAIzC+E,EAAUlF,OAASF,GA9BL,SAClBgE,EACAxD,GAEA,IAAMiF,EAAalB,SAASC,cAAchE,EAAKN,MAC/C6D,EAAc0B,EAAYjF,EAAKf,OAC/BuE,EAAQM,YAAYmB,EACvB,CAyBOC,CAAc1B,EAASoB,EAAU5E,MAG9BwD,GA/DY,SACnBA,EACAxD,GAEA,IAAMiF,EAAalB,SAASC,cAAchE,EAAKN,MAC/C6D,EAAc0B,EAAYjF,EAAKf,OAC/BuE,EAAQ2B,YAAYF,EACvB,CAqCOG,CAAe5B,EAASoB,EAAU5E,KAJrC,CAwBJ,EAEYgF,EAAoB,SAC7BxB,EACA6B,GAGA,IADA,IAAIC,EAAS,EACJC,EAAI,EAAGA,EAAIF,EAAeG,SAAUD,EACzC,GAAIF,EAAeE,GAAG7F,OAASN,EAA/B,CAGA,IAAMqG,EAAeJ,EAAeE,GAC9BG,EAAYlC,EAAQmC,WAAWJ,EAAID,GAErCG,EAAa/F,OAASF,EAYtBiG,EAAa/F,OAASH,EAO1BoF,EAAUe,EAAWD,IANjBC,EAAUzF,SACVqF,GAAU,GAbVI,EAAU5B,YACNU,EAEIiB,EAAazF,KAAKN,KAElB+F,EAAazF,KAAKf,OAV7B,CAyBR,E,u7BChHM,IAAM2G,EAAb,a,qRAAA,U,QAAA,G,EAAA,E,+YAII,WAAY3G,GAAwB,O,4FAAA,qBAC1BA,EACT,CANL,O,EAAA,E,EAAA,oCAQI,SAAsBA,GAElB,OAAOE,KAAKF,MAAMuD,QAAUvD,EAAMuD,KACrC,GAXL,sBAaI,SACI7C,EACAkG,GAGA1G,KAAK2G,MAAQnG,EAAOR,KAAK2G,OACzBzC,QAAQC,IAAI,mBAERuC,GACAA,ICtBL,SAA2BE,GAC9B,IAAIA,EAAU3B,aAAc2B,EAAU1B,mBAiBlC,MAAM,IAAI2B,MAAJ,gEACuDD,IAjB7D,ICAJnD,EACA7C,EAEMkG,EDHIC,EAAcH,EAAUzB,SAC9BjB,QAAQC,IAAI4C,GAERA,EAAYrD,SAASO,cACrB5C,EAAyB4C,cAEzB8C,EAAYC,UAAYJ,GAGxBA,EAAU3B,WCTlBxB,EDWQmD,EAAU1B,mBCRZ4B,EAAOrE,EAAWgB,EAFxB7C,EDWQmG,GCRRvB,EAAU/B,EAAQqB,YAAagC,GAC/BlG,EAAQkE,YAAcrB,EAAQqB,YDS1B8B,EAAU1B,mBAAqB6B,CAMtC,CDGOE,CAAkBjH,KACrB,I,uEA1BL,GAAiEH,G,0KGI3DqH,EAAAA,WAEF,WAAYxC,I,4FAAmB,SAC3B1E,KAAK0E,KAAOA,CACf,C,2CAED,SAAO7D,GACH4D,EAAWzE,KAAK0E,KAAM7D,EACzB,G,qBAED,WAAY,M,sEAVVqG,G,65BCuBC,IAAMrC,EAAgB,SACzBtE,EACAT,EACAqH,GAEA,GAAoB,WAAhB,EAAO5G,GAAmB,CAC1B,IAAM6G,EAAmB,CACrB1D,SAAUnD,EAAKmD,SACfnD,KAAMA,EAAKA,KACXT,MAAO,OAAKS,EAAKT,OAAUA,GAC3B2B,IAAK0F,GAAsBjG,GAO/B,MAJoC,mBAAzBkG,EAAMtH,MAAM8D,WACnBwD,EAAMtH,MAAM8D,SAAWwD,EAAMtH,MAAM8D,SAASwD,EAAMtH,MAAMuD,QAGrD+D,CACV,CAAM,GAAoB,iBAAT7G,EACd,MAAO,CACHmD,SAAUtC,EACVb,KAAAA,EACAT,MAAAA,EACA2B,IAAM0F,GAAWjG,GAElB,MACGkG,EAAmB,CACrB1D,SAAUrC,EACVd,KAAAA,EACAT,MAAAA,EACA2B,IAAM0F,GAAWjG,GAOrB,OAHAkG,EAAMJ,UAAY,IAAII,EAAM7G,KAAKT,GACjCsH,EAAMtH,MAAM8D,SAAZ,UAAuBwD,EAAMJ,iBAA7B,aAAuB,EAAiB7B,SAEjCiC,CAEd,ECnEKC,EAAM,SAAC9G,EAAM+G,EAAQH,GACvB,OAAOtC,EAActE,EAAM+G,EAAQH,EACtC,EAGKI,EAAO,SAAChH,EAAM+G,EAAQH,GACxB,OAAOtC,EAActE,EAAM+G,EAAQH,EACtC,E,k9DCIKK,GAAAA,SAAAA,G,oBACF,WAAY1H,GAA0B,8BAC5BA,EACT,C,iCACD,WAII,OACI,YAAQ2H,MAAO,eAAf,UACI,gCAAazH,KAAKF,MAAM4H,MAAMC,cAC9B,6BAGX,K,EAdCH,CAAef,GAiBfmB,GAAAA,SAAAA,G,kLACM,CACJF,MAAO,I,mCAGX,WAAS,WACL,OACI,SAAKD,MAAO,OAAZ,UACI,EAACD,GAAD,CAAQE,MAAO1H,KAAK2G,MAAMe,QAC1B,kCACA,YACIG,QAAS,kBACL,EAAKC,UAAS,SAAAnB,GAAK,MAAK,CAAEe,MAAOf,EAAMe,MAAQ,EAA5B,GADd,EADb,gCASX,K,EAnBCE,CAAYnB,IHVX,SAAoB/B,GACvB,IAAKA,EACD,MAAM,IAAImC,MAAJ,wBAA2BnC,IAGrC,OAAO,IAAIwC,EAAKxC,EACnB,EG0BYqD,CAAWnD,SAASoD,cAAc,UAC1C7C,OAAO,EAACyC,GAAD,I","sources":["webpack://2022_2_technopanki/./src/packages/reacts/index.d.ts","webpack://2022_2_technopanki/./src/packages/reacts-dom/diff/operations.ts","webpack://2022_2_technopanki/./src/packages/shared/index.ts","webpack://2022_2_technopanki/./src/packages/reacts-dom/diff/childrenDiff.ts","webpack://2022_2_technopanki/./src/packages/reacts-dom/diff/createDiff.ts","webpack://2022_2_technopanki/./src/packages/reacts-dom/render/renderNode.ts","webpack://2022_2_technopanki/./src/packages/reacts-dom/utils.ts","webpack://2022_2_technopanki/./src/packages/reacts-dom/diff/applyDiff.ts","webpack://2022_2_technopanki/./src/packages/reacts/Component.ts","webpack://2022_2_technopanki/./src/packages/reacts/renderComponent.ts","webpack://2022_2_technopanki/./src/packages/reacts-dom/render/rerenderNode.ts","webpack://2022_2_technopanki/./src/packages/reacts-dom/root/index.ts","webpack://2022_2_technopanki/./src/packages/jsx-runtime/createElement.ts","webpack://2022_2_technopanki/./src/packages/jsx-runtime/index.js","webpack://2022_2_technopanki/./src/App.tsx"],"sourcesContent":["// React Nodes\n// https://github.com/DefinitelyTyped/DefinitelyTyped/blob/e836acc75a78cf0655b5dfdbe81d69fdd4d8a252/types/react/index.d.ts#L162\n\n// React src\n// https://github.com/facebook/react/tree/main/packages/react\n\nimport { ChildrenType, PropsType, PropType, VNodeType } from '../shared/common';\n\ntype ComponentChildren =\n    | Exclude<ChildrenType, VNodeType[] | VNodeType>\n    | ReactsNode\n    | ReactsNode[]\n    | null;\n// type ComponentChildren = ComponentChild[] | ComponentChild;\n\nexport interface ReactsNode<P extends PropsType = {}> extends VNodeType {\n    props: { children: ComponentChildren } & P;\n    _instance?: ComponentClass<P>;\n}\n\n//\n// Component\n// -------------------------------------------------\n\nexport abstract class ComponentClass<P extends PropsType = {}, S = {}> {\n    readonly props: Readonly<P>;\n    state: Readonly<S>;\n    context?: Context<any>;\n\n    rootDomRef?: HTMLElement;\n    prevRenderVNodeRef?: VNodeType;\n\n    // TODO static fields\n    static displayName?: string;\n    static defaultProps?: any;\n\n    // @ts-ignore\n    constructor(props: Readonly<P> | P, context?: ReactsContext) {\n        this.props = props;\n        this.context = context;\n    }\n\n    setState<K extends keyof S>(\n        update: (prevState: S, props?: Readonly<P>) => Pick<S, K> | S,\n        callback?: () => void,\n    ): void;\n\n    componentDidMount?(): void;\n    componentWillUnmount?(): void;\n    shouldComponentUpdate?(props: P | Readonly<P>): boolean;\n\n    render(): ReactsNode<P>;\n}\n\n//\n// Context\n// -------------------------------------------------\n","import { AttributeUpdater, Operation } from './index';\nimport { VNodeType } from '../../shared/common';\n\nexport const SKIP_OPERATION = 'skip';\nexport const UPDATE_OPERATION = 'update';\nexport const REPLACE_OPERATION = 'replace';\nexport const REMOVE_OPERATION = 'remove';\nexport const INSERT_OPERATION = 'append';\n\nexport const skip = (): Operation => ({\n    type: SKIP_OPERATION,\n});\n\nexport const update = (\n    attrUpdater: AttributeUpdater,\n    childrenUpdater: Operation[],\n): Operation => ({\n    type: UPDATE_OPERATION,\n    attrUpdater,\n    childrenUpdater,\n});\n\nexport const replace = (newNode: VNodeType) => ({\n    type: REPLACE_OPERATION,\n    node: newNode,\n});\n\nexport const remove = () => ({\n    type: REMOVE_OPERATION,\n});\n\nexport const insert = (node: VNodeType) => ({\n    type: INSERT_OPERATION,\n    node,\n});\n\n//\n// Helper objects\n// ----------------------------------------------------\n\nexport const emptyAttrUpdate: AttributeUpdater = {\n    remove: [],\n    set: [],\n    update: [],\n};\n","export const PROVIDER_TYPE = 'provider';\nexport const CONSUMER_TYPE = 'consumer';\n\nexport const KEY_SYMBOL = Symbol('key');\n\nexport const DOM_ELEMENT_SYMBOL = Symbol.for('dom');\nexport const COMPONENT_ELEMENT_SYMBOL = Symbol.for('component');\nexport const TEMP_ELEMENT_SYMBOL = Symbol.for('temp');\nexport const CONTEXT_ELEMENT_SYMBOL = Symbol.for('context');\nexport const PROVIDER_ELEMENT_SYMBOL = Symbol.for('provider');\nexport const CONSUMER_ELEMENT_SYMBOL = Symbol.for('consumer');\n","import { ChildrenType, KeyType, VNodeType } from '../../shared/common';\nimport { Operation } from './index';\nimport { emptyAttrUpdate, insert, remove, skip, update } from './operations';\nimport { createDiff } from './createDiff';\n\n/**\n * Adds remove operation to operations and removes elements from oldChildren\n * until finds children with key\n * @param operations\n * @param oldChildren\n * @param key\n */\nconst removeUntilKey = (\n    operations: Operation[],\n    oldChildren: [KeyType, VNodeType][],\n    key: KeyType,\n) => {\n    while (oldChildren[0] && oldChildren[0][0] !== key) {\n        operations.push(remove());\n        oldChildren.shift();\n    }\n};\n\n/**\n * Adds insert operation to operations and removes elements from oldChildren\n * until finds children with key\n * @param operations\n * @param newChildren\n * @param key\n */\nconst insertUntilKey = (\n    operations: Operation[],\n    newChildren: [KeyType, VNodeType][],\n    key: KeyType,\n) => {\n    while (newChildren[0] && newChildren[0][0] !== key) {\n        operations.push(insert(newChildren[0][1]));\n        newChildren.shift();\n    }\n};\n\n// TODO: refactor\n// в данный момент мы каждый раз создаем доп массивы. Возможно можно сделать оптимальнее\nconst findNextUpdateKey = (\n    oldChildrenWithKeys: [KeyType, VNodeType][],\n    newChildrenWithKeys: [KeyType, VNodeType][],\n): KeyType => {\n    const oldChildrenKeys = oldChildrenWithKeys.map(node => node[0]);\n    const newChildrenKeys = newChildrenWithKeys.map(node => node[0]);\n\n    return oldChildrenKeys.find(k => newChildrenKeys.indexOf(k) !== -1) || null;\n};\n\n/**\n * Compares old and new children\n * @param oldChildren\n * @param newChildren\n * @return - operations to be performed on children\n */\nexport const childrenDiff = (\n    oldChildren: VNodeType[],\n    newChildren: VNodeType[],\n): Operation[] => {\n    const operations: Operation[] = [];\n\n    const oldChildrenWithKeys = oldChildren.map(\n        (node: VNodeType): [KeyType, VNodeType] => [node.key, node],\n    );\n    const newChildrenWithKeys = newChildren.map(\n        (node: VNodeType): [KeyType, VNodeType] => [node.key, node],\n    );\n\n    let nextUpdateKey = findNextUpdateKey(\n        oldChildrenWithKeys,\n        newChildrenWithKeys,\n    );\n\n    while (nextUpdateKey) {\n        removeUntilKey(operations, oldChildrenWithKeys, nextUpdateKey);\n        insertUntilKey(operations, newChildrenWithKeys, nextUpdateKey);\n\n        operations.push(\n            createDiff(\n                // @ts-ignore guaranteed to be an element\n                oldChildrenWithKeys.shift()[1],\n                // @ts-ignore guaranteed to be an element\n                newChildrenWithKeys.shift()[1],\n            ),\n        );\n\n        nextUpdateKey = findNextUpdateKey(\n            oldChildrenWithKeys,\n            newChildrenWithKeys,\n        );\n    }\n\n    removeUntilKey(operations, oldChildrenWithKeys, nextUpdateKey);\n    insertUntilKey(operations, newChildrenWithKeys, nextUpdateKey);\n\n    return operations;\n};\n","import { PropsType, VNodeType } from '../../shared/common';\nimport { AttributeUpdater, Operation } from './index';\nimport {\n    emptyAttrUpdate,\n    insert,\n    remove,\n    replace,\n    skip,\n    update,\n} from './operations';\nimport { COMPONENT_ELEMENT_SYMBOL, DOM_ELEMENT_SYMBOL } from '../../shared';\nimport { childrenDiff } from './childrenDiff';\nimport { createContext } from '../../reacts-context/context';\n\n// TODO: add list of attributes\nconst compareAttributes = (\n    oldNodeProps: PropsType,\n    newNodeProps: PropsType,\n): AttributeUpdater => {\n    const oldNodeWithoutChildren = Object.entries(oldNodeProps).filter(\n        ([attr, _]) => attr !== 'children',\n    );\n    const newNodeWithoutChildren = Object.entries(newNodeProps).filter(\n        ([attr, _]) => attr !== 'children',\n    );\n\n    const oldNodeAttrNames = oldNodeWithoutChildren.map(([attr, _]) => attr);\n    const newNodeAttrNames = newNodeWithoutChildren.map(([attr, _]) => attr);\n\n    return {\n        set: newNodeWithoutChildren.filter(\n            ([attr, _]) => oldNodeAttrNames.indexOf(attr) === -1,\n        ),\n        remove: oldNodeAttrNames.filter(\n            attr => newNodeAttrNames.indexOf(attr) === -1,\n        ),\n        update: newNodeWithoutChildren.filter(\n            ([attr, value]) =>\n                oldNodeAttrNames.indexOf(attr) !== -1 &&\n                oldNodeAttrNames.find(\n                    node => node[0] === attr && node[1] !== value,\n                ),\n        ),\n    };\n};\n\nconst isPrimitiveTypeChildren = (\n    oldNode: VNodeType,\n    newNode: VNodeType,\n): boolean => {\n    return (\n        (!oldNode.props.children && !oldNode.props.children) ||\n        (typeof oldNode.props.children === 'string' &&\n            typeof newNode.props.children === 'string')\n    );\n};\n\nconst comparePrimitiveTypeChildren = (\n    oldNode: VNodeType,\n    newNode: VNodeType,\n): Operation => {\n    if (!oldNode.props.children && !newNode.props.children) {\n        return skip();\n    } else if (!oldNode.props.children && newNode.props.children) {\n        return insert(newNode);\n    } else if (oldNode.props.children && !newNode.props.children) {\n        return remove();\n    }\n\n    if (\n        typeof oldNode.props.children === 'string' &&\n        typeof newNode.props.children === 'string'\n    ) {\n        if (oldNode.props.children === newNode.props.children) {\n            return skip();\n        } else {\n            return update(\n                {\n                    ...emptyAttrUpdate,\n                    update: [['textContent', newNode.props.children]],\n                },\n                [],\n            );\n        }\n    }\n\n    return skip();\n};\n\nconst updateChild = (\n    attrUpdater: AttributeUpdater,\n    oldChild: VNodeType,\n    newChild: VNodeType,\n): Operation => {\n    return update(attrUpdater, [createDiff(oldChild, newChild)]);\n};\n\n// TODO: refactor\n/**\n * Compares 2 VDom nodes and returns\n * the operation to be performed in the real one on this node in DOM\n * @param oldNode\n * @param newNode\n */\nexport const createDiff = (\n    oldNode: VNodeType,\n    newNode: VNodeType,\n): Operation => {\n    if (oldNode.$$typeof !== newNode.$$typeof) {\n        return replace(newNode);\n    }\n\n    if (\n        oldNode.$$typeof === DOM_ELEMENT_SYMBOL &&\n        newNode.$$typeof === DOM_ELEMENT_SYMBOL\n    ) {\n        const attrUpdate = compareAttributes(oldNode.props, newNode.props);\n\n        // if (Object.values(attrUpdate).length === 0 &&\n        //     attrUpdate.set.length == 0 &&\n        //     attrUpdate.remove.length == 0 &&\n        //     attrUpdate.update.length == 0 &&\n        //     oldNode.props.children === newNode.props.children\n        // ) {\n        //     return skip();\n        // }\n\n        if (isPrimitiveTypeChildren(oldNode, newNode)) {\n            return comparePrimitiveTypeChildren(oldNode, newNode);\n        }\n\n        if (\n            !Array.isArray(oldNode.props.children) &&\n            !Array.isArray(newNode.props.children)\n        ) {\n            return updateChild(\n                attrUpdate,\n                // @ts-ignore node.type guaranteed to be typeof VNodeType\n                oldNode.props.children,\n                newNode.props.children,\n            );\n        }\n\n        return update(\n            attrUpdate,\n            childrenDiff(\n                // @ts-ignore node.type guaranteed to be typeof VNodeType or [VNodeType]\n                Array.isArray(oldNode.props.children)\n                    ? oldNode.props.children\n                    : [oldNode.props.children],\n                Array.isArray(newNode.props.children)\n                    ? newNode.props.children\n                    : [newNode.props.children],\n            ),\n        );\n    } else if (\n        oldNode.$$typeof.description === COMPONENT_ELEMENT_SYMBOL.description &&\n        newNode.$$typeof.description === COMPONENT_ELEMENT_SYMBOL.description\n    ) {\n        console.log('Diff: ', oldNode, newNode);\n        if (oldNode.type !== newNode.type) {\n            return replace(newNode);\n        } else {\n            const attrUpdate = compareAttributes(oldNode.props, newNode.props);\n            if (\n                !Array.isArray(oldNode.props.children) &&\n                !Array.isArray(newNode.props.children)\n            ) {\n                return update(attrUpdate, [\n                    // @ts-ignore children guaranteed not to be undefined (checked in isPrimitiveTypeChildren)\n                    createDiff(oldNode.props.children, newNode.props.children),\n                ]);\n            }\n            return update(\n                attrUpdate,\n                childrenDiff(\n                    // @ts-ignore node.type guaranteed to be typeof VNodeType or [VNodeType]\n                    Array.isArray(oldNode.props.children)\n                        ? oldNode.props.children\n                        : [oldNode.props.children],\n                    Array.isArray(newNode.props.children)\n                        ? newNode.props.children\n                        : [newNode.props.children],\n                ),\n            );\n        }\n    } else {\n        // @ts-ignore TODO: for now just return diff from children\n        return createDiff(oldNode.props.children, newNode.props.children);\n    }\n\n    return skip();\n};\n","import {\n    ChildrenType,\n    ComponentConstructor,\n    ComponentType,\n    PropsType,\n    VNodeType,\n} from '../../shared/common';\nimport {\n    COMPONENT_ELEMENT_SYMBOL,\n    DOM_ELEMENT_SYMBOL,\n} from '../../shared/index';\n\n// TODO: rework to setAttributes\nexport const setAttributes = (element: HTMLElement, props: PropsType) => {\n    for (let attr in props) {\n        if (attr !== 'children') {\n            // @ts-ignore\n            element[attr] = props[attr];\n        }\n    }\n};\n\n// Здесь пофиксить баг с <p>Item {this.props.someData}</p>\nconst renderChildren = (element: HTMLElement, children: ChildrenType) => {\n    if (children) {\n        if (typeof children === 'string') {\n            element.innerText = children;\n        } else if (Array.isArray(children)) {\n            children.forEach((node: VNodeType) => {\n                renderNode(element, node);\n            });\n        } else {\n            // @ts-ignore we checked if node,props.children is VNodeType[]\n            renderNode(element, children);\n        }\n    }\n};\n\nconst renderDomElement = (node: VNodeType & { type: string }): HTMLElement => {\n    const element = document.createElement(node.type);\n    node._domElement = element;\n\n    setAttributes(element, node.props);\n    if (node.props.children) {\n        renderChildren(element, node.props.children);\n    }\n\n    return element;\n};\n\nconst renderComponent = (\n    root: HTMLElement,\n    node: VNodeType & { type: ComponentConstructor },\n): ComponentType => {\n    const instance = new node.type(node.props);\n\n    // Set instance fields\n    node._domElement = root;\n    instance.rootDomRef = root;\n    instance.prevRenderVNodeRef = instance.render();\n\n    renderNode(root, instance.prevRenderVNodeRef);\n    return instance;\n};\n\n/**\n * Renders virtual dome node inside root dom node\n * @param root\n * @param node\n */\nexport const renderNode = (root: HTMLElement, node: VNodeType) => {\n    if (node.$$typeof === DOM_ELEMENT_SYMBOL) {\n        // @ts-ignore node.type guaranteed to be typeof string\n        root.appendChild(renderDomElement(node));\n    } else if (node.$$typeof === COMPONENT_ELEMENT_SYMBOL) {\n        // @ts-ignore node.type guaranteed to be typeof ComponentConstructor\n        renderComponent(root, node);\n    } else {\n        if (node.props.children) {\n            renderChildren(root, node.props.children);\n        }\n    }\n};\n","import { PropType } from '../shared/common';\nimport { setAttributes } from './render/renderNode';\n\nexport const createDomElement = (\n    tagName: string,\n    attributes: { [key: string]: PropType },\n): HTMLElement => {\n    const element = document.createElement(tagName);\n    setAttributes(element, attributes);\n    return element;\n};\n","import { AttributeUpdater, Operation } from './index';\nimport {\n    INSERT_OPERATION,\n    REMOVE_OPERATION,\n    REPLACE_OPERATION,\n    SKIP_OPERATION,\n    UPDATE_OPERATION,\n} from './operations';\nimport { setAttributes } from '../render/renderNode';\nimport { VNodeType } from '../../shared/common';\nimport { createDomElement } from '../utils';\n\n/**\n * Creates DOM node from node and replaces element with this node\n * @param element\n * @param node\n */\nconst replaceElement = (\n    element: HTMLElement,\n    node: VNodeType & { type: string },\n) => {\n    const newElement = document.createElement(node.type);\n    setAttributes(newElement, node.props);\n    element.replaceWith(newElement);\n};\n\nconst updateElementAttributes = (\n    element: HTMLElement,\n    operation: Operation & {\n        attrUpdater: AttributeUpdater;\n        childrenUpdater: Operation[];\n    },\n) => {\n    // TODO refactor and add setAttribute maybe\n    operation.attrUpdater.set.forEach(\n        // @ts-ignore\n        ([attr, value]) => element.setAttribute(attr, value),\n    );\n    operation.attrUpdater.update.forEach(\n        // @ts-ignore\n        ([attr, value]) => (element[attr] = value),\n    );\n    operation.attrUpdater.remove.forEach(attr => element.removeAttribute(attr));\n};\n\nconst insertElement = (\n    element: HTMLElement,\n    node: VNodeType & { type: string },\n) => {\n    const newElement = document.createElement(node.type);\n    setAttributes(newElement, node.props);\n    element.appendChild(newElement);\n};\n\nexport const applyDiff = (element: HTMLElement, operation: Operation) => {\n    if (operation.type === SKIP_OPERATION) {\n        return;\n    }\n\n    if (operation.type === REPLACE_OPERATION) {\n        // @ts-ignore trust me, check replace operation in operations.ts\n        replaceElement(element, operation.node);\n        return;\n    }\n\n    if (operation.type === UPDATE_OPERATION) {\n        // @ts-ignore trust me, check replace operation in operations.ts\n        updateElementAttributes(element, operation);\n\n        if (operation.childrenUpdater) {\n            // @ts-ignore TODO\n            applyChildrenDiff(element, operation.childrenUpdater);\n        }\n    }\n\n    if (operation.type === INSERT_OPERATION) {\n        // @ts-ignore trust me, check insert operation in operations.ts\n        insertElement(element, operation.node);\n    }\n\n    return element;\n};\n\nexport const applyChildrenDiff = (\n    element: HTMLElement,\n    diffOperations: Operation[],\n) => {\n    let offset = 0;\n    for (let i = 0; i < diffOperations.length; ++i) {\n        if (diffOperations[i].type === SKIP_OPERATION) {\n            continue;\n        }\n        const childUpdater = diffOperations[i];\n        const childElem = element.childNodes[i + offset];\n\n        if (childUpdater.type === INSERT_OPERATION) {\n            childElem.appendChild(\n                createDomElement(\n                    // @ts-ignore trust me, check insert operation in operations.ts\n                    childUpdater.node.type,\n                    // @ts-ignore trust me, check insert operation in operations.ts\n                    childUpdater.node.props,\n                ),\n            );\n            continue;\n        }\n\n        if (childUpdater.type === REMOVE_OPERATION) {\n            childElem.remove();\n            offset -= 1;\n            continue;\n        }\n\n        // @ts-ignore TODO\n        applyDiff(childElem, childUpdater);\n    }\n};\n","import { ComponentClass, ReactsContext } from './index';\nimport { rerenderComponent } from './renderComponent';\nimport { PropsType } from '../shared/common';\n\nexport class Component<P extends PropsType = {}, S = {}> extends ComponentClass<\n    P,\n    S\n> {\n    constructor(props: P | Readonly<P>) {\n        super(props);\n    }\n\n    shouldComponentUpdate(props: P | Readonly<P>): boolean {\n        // TODO: refactor\n        return this.props.value === props.value;\n    }\n\n    setState<K extends keyof S>(\n        update: (prevState: S, props?: Readonly<P>) => Pick<S, K> | S,\n        callback?: () => void,\n    ) {\n        // @ts-ignore\n        this.state = update(this.state);\n        console.log('setState called');\n\n        if (callback) {\n            callback();\n        }\n\n        rerenderComponent(this);\n    }\n}\n","import { Component } from './Component';\nimport { rerenderNode } from '../reacts-dom/render/rerenderNode';\nimport { COMPONENT_ELEMENT_SYMBOL } from '../shared';\n\nexport function rerenderComponent(component: Component<any, any>) {\n    if (component.rootDomRef && component.prevRenderVNodeRef) {\n        const VDomElement = component.render();\n        console.log(VDomElement);\n        if (\n            VDomElement.$$typeof.description ===\n            COMPONENT_ELEMENT_SYMBOL.description\n        ) {\n            VDomElement._instance = component;\n        }\n        rerenderNode(\n            component.rootDomRef,\n            // @ts-ignore if we call rerender => we have some prevRenderVNodeRef with DOM element\n            component.prevRenderVNodeRef,\n            VDomElement,\n        );\n        component.prevRenderVNodeRef = VDomElement;\n    } else {\n        throw new Error(\n            `rootDomRef or prevRenderVNodeRef is empty. component: ${component}`,\n        );\n    }\n}\n","import { VNodeType } from '../../shared/common';\nimport { createDiff } from '../diff/createDiff';\nimport { applyDiff } from '../diff/applyDiff';\n\nexport const rerenderNode = (\n    element: HTMLElement,\n    oldNode: VNodeType & { _domElement: HTMLElement },\n    newNode: VNodeType,\n) => {\n    const diff = createDiff(oldNode, newNode);\n    applyDiff(oldNode._domElement, diff);\n    newNode._domElement = oldNode._domElement;\n};\n","import { VNodeType } from '../../shared/common';\nimport { renderNode } from '../render/renderNode';\n\nexport interface RootType {\n    render(node: VNodeType): void;\n    unmount(): void;\n}\n\nclass Root implements RootType {\n    root: HTMLElement;\n    constructor(root: HTMLElement) {\n        this.root = root;\n    }\n\n    render(node: VNodeType): void {\n        renderNode(this.root, node);\n    }\n\n    unmount() {}\n}\n\nexport function createRoot(root: HTMLElement | null): RootType {\n    if (!root) {\n        throw new Error(`Root element: ${root}`);\n    }\n\n    return new Root(root);\n}\n","import {\n    ChildrenType,\n    JSXElementType,\n    KeyType,\n    PropsType,\n    VNodeType,\n} from '../shared/common';\nimport {\n    COMPONENT_ELEMENT_SYMBOL,\n    CONSUMER_ELEMENT_SYMBOL,\n    CONSUMER_TYPE,\n    DOM_ELEMENT_SYMBOL,\n    KEY_SYMBOL,\n    PROVIDER_ELEMENT_SYMBOL,\n    PROVIDER_TYPE,\n    TEMP_ELEMENT_SYMBOL,\n} from '../shared';\nimport { Component } from '../reacts/Component';\nimport {\n    ConsumerConstructor,\n    ProviderConstructor,\n} from '../reacts-context/context';\n\n// TODO: refactor and add Fragment\n/**\n * Creates a virtual DOM element - virtual node. Used for JSX\n * @param type\n * @param props\n * @param maybeKey\n * @returns {{_children: null, _parent: null, _nextDom: undefined, _depth: number, construct: undefined, type, key, props, _instance: null}}\n */\nexport const createElement = (\n    type: JSXElementType,\n    props: PropsType & { children: ChildrenType },\n    maybeKey: KeyType | null | undefined,\n): VNodeType => {\n    if (typeof type === 'object') {\n        const vnode: VNodeType = {\n            $$typeof: type.$$typeof,\n            type: type.type,\n            props: { ...type.props, ...props },\n            key: maybeKey ? maybeKey : KEY_SYMBOL,\n        };\n\n        if (typeof vnode.props.children === 'function') {\n            vnode.props.children = vnode.props.children(vnode.props.value);\n        }\n\n        return vnode;\n    } else if (typeof type === 'string') {\n        return {\n            $$typeof: DOM_ELEMENT_SYMBOL,\n            type,\n            props,\n            key: !maybeKey ? KEY_SYMBOL : maybeKey,\n        };\n    } else {\n        const vnode: VNodeType = {\n            $$typeof: COMPONENT_ELEMENT_SYMBOL,\n            type,\n            props,\n            key: !maybeKey ? KEY_SYMBOL : maybeKey,\n        };\n\n        // @ts-ignore vnode.type guaranteed to be typeof ComponentConstructor\n        vnode._instance = new vnode.type(props);\n        vnode.props.children = vnode._instance?.render();\n\n        return vnode;\n    }\n};\n","// TODO: Maybe add default props\nimport { createElement } from './createElement.ts';\n\nconst jsx = (type, config, maybeKey) => {\n    return createElement(type, config, maybeKey);\n};\n\n// TODO\nconst jsxs = (type, config, maybeKey) => {\n    return createElement(type, config, maybeKey);\n};\n\nexport { jsx, jsxs };\n","import { Component } from './packages/reacts/Component';\nimport { createRoot } from './packages/reacts-dom/root/index';\n\n// Router.addRoutePath('/', Main);\n// Router.addRoutePath('/signup', SignUp);\n// Router.addRoutePath('/signin', SignIn);\n// Router.addRoutePath('/vacancies', Vacancies);\n//\n// window.addEventListener('popstate', () => {\n//     Router.render(location.pathname, true);\n// });\n//\n// authenticateUser().then(() => Router.render(location.pathname));\n\nclass Header extends Component<{ count: number }> {\n    constructor(props: { count: number }) {\n        super(props);\n    }\n    render() {\n        // TODO: fix bug with <p>Item: ${this.props.count.toString()}</p>\n        // сейчас он возвращает массив, и поэтому на проверке в renderChildren в\n        // renderNode.ts не проходит проверку и падает с ошибкой\n        return (\n            <header class={'main__header'}>\n                <p>{`Item: ${this.props.count.toString()}`}</p>\n                <p>Item 2</p>\n            </header>\n        );\n    }\n}\n\nclass App extends Component<{}, { count: number }> {\n    state = {\n        count: 0,\n    };\n\n    render() {\n        return (\n            <div class={'main'}>\n                <Header count={this.state.count} />\n                <h1>Hello world!</h1>\n                <button\n                    onclick={() =>\n                        this.setState(state => ({ count: state.count + 1 }))\n                    }\n                >\n                    Increment button\n                </button>\n            </div>\n        );\n    }\n}\n\nconst root = createRoot(document.querySelector('#root'));\nroot.render(<App />);\n"],"names":["ComponentClass","props","context","this","SKIP_OPERATION","UPDATE_OPERATION","REPLACE_OPERATION","REMOVE_OPERATION","INSERT_OPERATION","skip","type","update","attrUpdater","childrenUpdater","replace","newNode","node","remove","insert","emptyAttrUpdate","set","KEY_SYMBOL","Symbol","DOM_ELEMENT_SYMBOL","COMPONENT_ELEMENT_SYMBOL","removeUntilKey","operations","oldChildren","key","push","shift","insertUntilKey","newChildren","findNextUpdateKey","oldChildrenWithKeys","newChildrenWithKeys","oldChildrenKeys","map","newChildrenKeys","find","k","indexOf","childrenDiff","nextUpdateKey","createDiff","compareAttributes","oldNodeProps","newNodeProps","oldNodeWithoutChildren","Object","entries","filter","attr","newNodeWithoutChildren","oldNodeAttrNames","newNodeAttrNames","value","updateChild","oldChild","newChild","oldNode","$$typeof","attrUpdate","children","isPrimitiveTypeChildren","comparePrimitiveTypeChildren","Array","isArray","description","console","log","setAttributes","element","renderChildren","innerText","forEach","renderNode","root","appendChild","document","createElement","_domElement","renderDomElement","instance","rootDomRef","prevRenderVNodeRef","render","renderComponent","createDomElement","tagName","attributes","applyDiff","operation","setAttribute","removeAttribute","updateElementAttributes","applyChildrenDiff","newElement","insertElement","replaceWith","replaceElement","diffOperations","offset","i","length","childUpdater","childElem","childNodes","Component","callback","state","component","Error","diff","VDomElement","_instance","rerenderComponent","Root","maybeKey","vnode","jsx","config","jsxs","Header","class","count","toString","App","onclick","setState","createRoot","querySelector"],"sourceRoot":""}