{"version":3,"file":"main.js","mappings":"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","sources":["webpack://2022_2_technopanki/./packages/reacts/index.d.ts","webpack://2022_2_technopanki/./packages/reacts-dom/diff/operations.ts","webpack://2022_2_technopanki/./packages/shared/index.ts","webpack://2022_2_technopanki/./packages/reacts-dom/diff/childrenDiff.ts","webpack://2022_2_technopanki/./packages/reacts-dom/diff/createDiff.ts","webpack://2022_2_technopanki/./packages/reacts-dom/render/renderNode.ts","webpack://2022_2_technopanki/./packages/reacts-dom/utils.ts","webpack://2022_2_technopanki/./packages/reacts-dom/diff/applyDiff.ts","webpack://2022_2_technopanki/./packages/reacts/Component.ts","webpack://2022_2_technopanki/./packages/reacts/renderComponent.ts","webpack://2022_2_technopanki/./packages/reacts-dom/render/rerenderNode.ts","webpack://2022_2_technopanki/./packages/jsx-runtime/createElement.ts","webpack://2022_2_technopanki/./packages/jsx-runtime/index.js","webpack://2022_2_technopanki/./packages/Example.tsx","webpack://2022_2_technopanki/./packages/reacts-dom/root/index.ts","webpack://2022_2_technopanki/./packages/tess.tsx"],"sourcesContent":["// React Nodes\n// https://github.com/DefinitelyTyped/DefinitelyTyped/blob/e836acc75a78cf0655b5dfdbe81d69fdd4d8a252/types/react/index.d.ts#L162\n\n// React src\n// https://github.com/facebook/react/tree/main/packages/react\n\n//\n// VNode API\n// -------------------------------------------------------------------\nimport { ChildrenType, PropsType, VNodeType } from '../reacts-dom/common';\n\ntype ComponentChild = Exclude<ChildrenType, VNodeType[] | VNodeType> &\n    ReactsElement<any>;\ntype ComponentChildren = ComponentChild[] | ComponentChild;\n\nexport interface ReactsElement<P extends PropsType> extends VNodeType {\n    props: { children: ComponentChildren } & P;\n    _instance?: ComponentClass<P>;\n}\n\nexport abstract class ComponentClass<P extends PropsType = {}, S = {}> {\n    // fields\n    readonly props: Readonly<P>;\n    state: Readonly<S>;\n    context: unknown; // TODO\n\n    rootDomRef?: HTMLElement;\n    prevRenderVNodeRef?: VNodeType;\n    // refs: {\n    //     [key: string]: ComponentClass<P, S> | Element;\n    // };\n\n    // TODO: rework to queue maybe\n\n    // TODO static fields\n    static displayName?: string;\n    static defaultProps?: any;\n\n    // @ts-ignore\n    constructor(props: Readonly<P> | P) {\n        this.props = props;\n    }\n\n    // action methods\n    setState<K extends keyof S>(\n        /** Function for state update */\n        update: (prevState: S, props?: Readonly<P>) => Pick<S, K> | S,\n        callback?: () => void,\n    ): void;\n    // From https://github.com/DefinitelyTyped/DefinitelyTyped/blob/e836acc75a78cf0655b5dfdbe81d69fdd4d8a252/types/react/index.d.ts#L402\n    // // We MUST keep setState() as a unified signature because it allows proper checking of the method return type.\n    // // See: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/18365#issuecomment-351013257\n    // setState<K extends keyof S>(\n    //     state: | ((prevState: Readonly<S>, props: Readonly<P>,) => Pick<S, K> | Partial<S> | null) | (Pick<S, K> | Partial<S> | null),\n    //     callback?: () => void,\n    // ): void;\n\n    componentDidMount?(): void;\n    componentWillUnmount?(): void;\n    shouldComponentUpdate?(): boolean;\n\n    render(): ReactsElement<P>;\n}\n","import { AttributeUpdater, Operation } from './index';\nimport { VNodeType } from '../common';\n\nexport const SKIP_OPERATION = 'skip';\nexport const UPDATE_OPERATION = 'update';\nexport const REPLACE_OPERATION = 'replace';\nexport const REMOVE_OPERATION = 'remove';\nexport const INSERT_OPERATION = 'append';\n\nexport const skip = (): Operation => ({\n    type: SKIP_OPERATION,\n});\n\nexport const update = (\n    attrUpdater: AttributeUpdater,\n    childrenUpdater: Operation[],\n    oldNode: VNodeType,\n): Operation => ({\n    type: UPDATE_OPERATION,\n    attrUpdater,\n    childrenUpdater,\n    oldNode,\n});\n\nexport const replace = (newNode: VNodeType) => ({\n    type: REPLACE_OPERATION,\n    node: newNode,\n});\n\nexport const remove = () => ({\n    type: REMOVE_OPERATION,\n});\n\nexport const insert = (node: VNodeType) => ({\n    type: INSERT_OPERATION,\n    node,\n});\n\n//\n// Helper objects\n// ----------------------------------------------------\n\nexport const emptyAttrUpdate: AttributeUpdater = {\n    remove: [],\n    set: [],\n    update: [],\n};\n","export const KEY_SYMBOL = Symbol('key');\r\nexport const DOM_ELEMENT_SYMBOL = Symbol('dom');\r\nexport const COMPONENT_ELEMENT_SYMBOL = Symbol('component');\r\n","import { ChildrenType, KeyType, VNodeType } from '../common';\nimport { Operation } from './index';\nimport { emptyAttrUpdate, insert, remove, skip, update } from './operations';\nimport { createDiff } from './createDiff';\n\nconst removeUntilKey = (\n    operations: Operation[],\n    oldChildren: [KeyType, VNodeType][],\n    key: KeyType,\n) => {\n    while (oldChildren[0] && oldChildren[0][0] !== key) {\n        operations.push(remove());\n        oldChildren.shift();\n    }\n};\n\nconst insertUntilKey = (\n    operations: Operation[],\n    newChildren: [KeyType, VNodeType][],\n    key: KeyType,\n) => {\n    while (newChildren[0] && newChildren[0][0] !== key) {\n        operations.push(insert(newChildren[0][1]));\n        newChildren.shift();\n    }\n};\n\n// TODO: refactor\n// в данный момент мы каждый раз создаем доп массивы. Возможно можно сделать оптимальнее\nconst findNextUpdateKey = (\n    oldChildrenWithKeys: [KeyType, VNodeType][],\n    newChildrenWithKeys: [KeyType, VNodeType][],\n): KeyType => {\n    const oldChildrenKeys = oldChildrenWithKeys.map(node => node[0]);\n    const newChildrenKeys = newChildrenWithKeys.map(node => node[0]);\n\n    // return oldChildrenKeys.find(\n    //     k => newChildrenKeys.map(node => node[0]).indexOf(k[0]) !== -1,\n    // );\n\n    return (\n        oldChildrenKeys.find(\n            k =>\n                // @ts-ignore\n                newChildrenKeys.indexOf(k) !== -1,\n        ) || null\n    );\n};\n\nexport const childrenDiff = (\n    oldChildren: ChildrenType,\n    newChildren: ChildrenType,\n): Operation[] => {\n    const operations: Operation[] = [];\n\n    if (Array.isArray(oldChildren) && Array.isArray(newChildren)) {\n        const oldChildrenWithKeys = oldChildren.map(\n            (node: VNodeType): [KeyType, VNodeType] => [node.key, node],\n        );\n        const newChildrenWithKeys = newChildren.map(\n            (node: VNodeType): [KeyType, VNodeType] => [node.key, node],\n        );\n\n        let nextUpdateKey = findNextUpdateKey(\n            oldChildrenWithKeys,\n            newChildrenWithKeys,\n        );\n\n        while (nextUpdateKey) {\n            removeUntilKey(operations, oldChildrenWithKeys, nextUpdateKey);\n            insertUntilKey(operations, newChildrenWithKeys, nextUpdateKey);\n\n            operations.push(\n                createDiff(\n                    // @ts-ignore guaranteed to be an element\n                    oldChildrenWithKeys.shift()[1],\n                    // @ts-ignore guaranteed to be an element\n                    newChildrenWithKeys.shift()[1],\n                ),\n            );\n\n            nextUpdateKey = findNextUpdateKey(\n                oldChildrenWithKeys,\n                newChildrenWithKeys,\n            );\n        }\n\n        removeUntilKey(operations, oldChildrenWithKeys, nextUpdateKey);\n        insertUntilKey(operations, newChildrenWithKeys, nextUpdateKey);\n    } else {\n        throw new Error(`not array: ${oldChildren}, ${newChildren}`);\n    }\n\n    return operations;\n};\n","import { ChildrenType, ComponentType, PropsType, VNodeType } from '../common';\nimport { AttributeUpdater, Operation } from './index';\nimport { emptyAttrUpdate, replace, skip, update } from './operations';\nimport {\n    COMPONENT_ELEMENT_SYMBOL,\n    DOM_ELEMENT_SYMBOL,\n} from '../../shared/index';\nimport { childrenDiff } from './childrenDiff';\n\n// TODO: add list of attributes\nconst compareAttributes = (\n    oldNodeProps: PropsType,\n    newNodeProps: PropsType,\n): AttributeUpdater => {\n    const oldNodeWithoutChildren = Object.entries(oldNodeProps).filter(\n        ([attr, _]) => attr !== 'children',\n    );\n    const newNodeWithoutChildren = Object.entries(newNodeProps).filter(\n        ([attr, _]) => attr !== 'children',\n    );\n\n    const oldNodeAttrNames = oldNodeWithoutChildren.map(([attr, _]) => attr);\n    const newNodeAttrNames = newNodeWithoutChildren.map(([attr, _]) => attr);\n\n    return {\n        set: newNodeWithoutChildren.filter(\n            ([attr, _]) => oldNodeAttrNames.indexOf(attr) === -1,\n        ),\n        remove: oldNodeAttrNames.filter(\n            attr => newNodeAttrNames.indexOf(attr) === -1,\n        ),\n        update: newNodeWithoutChildren.filter(\n            ([attr, value]) =>\n                oldNodeAttrNames.indexOf(attr) !== -1 &&\n                oldNodeAttrNames.find(\n                    node => node[0] === attr && node[1] !== value,\n                ),\n        ),\n    };\n};\n\nconst isPrimitiveTypeChildren = (\n    oldNode: VNodeType,\n    newNode: VNodeType,\n): boolean => {\n    return (\n        (!oldNode.props.children && !oldNode.props.children) ||\n        (typeof oldNode.props.children === 'string' &&\n            typeof newNode.props.children === 'string')\n    );\n};\n\nconst comparePrimitiveTypeChildren = (\n    oldNode: VNodeType,\n    newNode: VNodeType,\n): Operation => {\n    // If both, oldChildren and newChildren are undefined or null\n    if (!oldNode.props.children && !oldNode.props.children) {\n        return skip();\n    }\n\n    console.log(oldNode.props.children, newNode.props.children);\n    if (\n        typeof oldNode.props.children === 'string' &&\n        typeof newNode.props.children === 'string'\n    ) {\n        if (oldNode.props.children === newNode.props.children) {\n            return skip();\n        } else {\n            return update(\n                {\n                    ...emptyAttrUpdate,\n                    update: [['textContent', newNode.props.children]],\n                },\n                [],\n                oldNode,\n            );\n        }\n    }\n\n    return skip();\n};\n\n// TODO: rework\n/**\n * Compares 2 VDom nodes and returns\n * the operation to be performed in the real one on this node in DOM\n * @param oldNode\n * @param newNode\n */\nexport const createDiff = (\n    oldNode: VNodeType,\n    newNode: VNodeType,\n): Operation => {\n    if (oldNode.$$typeof.description !== newNode.$$typeof.description) {\n        return replace(newNode);\n    }\n\n    if (\n        oldNode.$$typeof.description === DOM_ELEMENT_SYMBOL.description &&\n        newNode.$$typeof.description === DOM_ELEMENT_SYMBOL.description\n    ) {\n        const attrUpdate = compareAttributes(oldNode.props, newNode.props);\n\n        if (\n            attrUpdate.set.length == 0 &&\n            attrUpdate.remove.length == 0 &&\n            attrUpdate.update.length == 0 &&\n            oldNode.props.children === newNode.props.children\n        ) {\n            return skip();\n        }\n\n        if (isPrimitiveTypeChildren(oldNode, newNode)) {\n            return comparePrimitiveTypeChildren(oldNode, newNode);\n        }\n        return update(\n            attrUpdate,\n            childrenDiff(oldNode.props.children, newNode.props.children),\n            oldNode,\n        );\n    } else if (\n        oldNode.$$typeof.description === COMPONENT_ELEMENT_SYMBOL.description &&\n        newNode.$$typeof.description === COMPONENT_ELEMENT_SYMBOL.description\n    ) {\n        if (oldNode._instance !== newNode._instance) {\n            return replace(newNode);\n        }\n    } else {\n        throw new Error(\n            `Undefined type of node: ${oldNode.$$typeof}, ${newNode.$$typeof}`,\n        );\n    }\n\n    return skip();\n};\n","import {\n    ChildrenType,\n    ComponentType,\n    ConstructorType,\n    PropsType,\n    VNodeType,\n} from '../common';\nimport {\n    COMPONENT_ELEMENT_SYMBOL,\n    DOM_ELEMENT_SYMBOL,\n} from '../../shared/index';\n\n// TODO: rework to setAttributes\nexport const setAttributes = (element: HTMLElement, props: PropsType) => {\n    for (let attr in props) {\n        if (attr !== 'children') {\n            // @ts-ignore\n            element[attr] = props[attr];\n        }\n    }\n};\n\nconst renderChildren = (element: HTMLElement, children: ChildrenType) => {\n    if (children) {\n        if (typeof children === 'string') {\n            element.innerText = children;\n        } else if (children.constructor === Array) {\n            children.forEach((node: VNodeType) => {\n                renderNode(element, node);\n            });\n        } else {\n            // @ts-ignore we checked if node,props.children is VNodeType[]\n            renderNode(element, children);\n        }\n    }\n};\n\nconst renderComponentFirstTime = (\n    root: HTMLElement,\n    constructor: ConstructorType<any>,\n): ComponentType => {\n    const instance = new constructor();\n\n    // Set instance fields\n    instance.rootDomRef = root;\n    instance.prevRenderVNodeRef = instance.render();\n\n    renderNode(root, instance.prevRenderVNodeRef);\n    return instance;\n};\n\n/**\n * Renders virtual dome node inside root dom node\n * @param root\n * @param node\n */\nexport const renderNode = (root: HTMLElement, node: VNodeType) => {\n    if (node.$$typeof.description === DOM_ELEMENT_SYMBOL.description) {\n        // @ts-ignore node.type guaranteed to be typeof string\n        const element = document.createElement(node.type);\n        node._domElement = element;\n\n        setAttributes(element, node.props);\n        renderChildren(element, node.props.children);\n\n        root.appendChild(element);\n    } else if (\n        node.$$typeof.description === COMPONENT_ELEMENT_SYMBOL.description\n    ) {\n        if (node._instance) {\n            if (node._instance.rootDomRef) {\n                renderNode(node._instance.rootDomRef, node._instance.render());\n            } else {\n                throw new Error('node._instance._baseElement is empty');\n            }\n        } else {\n            node._instance = renderComponentFirstTime(\n                root,\n                // @ts-ignore node.type guaranteed to be typeof ComponentType\n                node.type.prototype.constructor,\n            );\n        }\n    }\n};\n","import { PropType } from './common';\nimport { setAttributes } from './render/renderNode';\n\nexport const createDomElement = (\n    tagName: string,\n    attributes: { [key: string]: PropType },\n): HTMLElement => {\n    const element = document.createElement(tagName);\n    setAttributes(element, attributes);\n    return element;\n};\n","import { AttributeUpdater, Operation } from './index';\nimport {\n    INSERT_OPERATION,\n    REMOVE_OPERATION,\n    REPLACE_OPERATION,\n    SKIP_OPERATION,\n    UPDATE_OPERATION,\n} from './operations';\nimport { setAttributes } from '../render/renderNode';\nimport { VNodeType } from '../common';\nimport { createDomElement } from '../utils';\n\nconst replaceElement = (\n    element: HTMLElement,\n    node: VNodeType & { type: string },\n) => {\n    const newElement = document.createElement(node.type);\n    setAttributes(newElement, node.props);\n    element.replaceWith(newElement);\n};\n\nconst updateElementAttributes = (\n    element: HTMLElement,\n    operation: Operation & {\n        type: string;\n        attrUpdater: AttributeUpdater;\n        childrenUpdater: Operation[];\n    },\n) => {\n    // TODO\n    operation.attrUpdater.set.forEach(\n        // @ts-ignore\n        ([attr, value]) => (element[attr] = value),\n    );\n    operation.attrUpdater.update.forEach(\n        // @ts-ignore\n        ([attr, value]) => (element[attr] = value),\n    );\n    operation.attrUpdater.remove.forEach(attr => element.removeAttribute(attr));\n};\n\nexport const applyDiff = (element: HTMLElement, operation: Operation) => {\n    console.log(operation);\n    if (operation.type === SKIP_OPERATION) {\n        return;\n    }\n\n    if (operation.type === REPLACE_OPERATION) {\n        // @ts-ignore trust me, check replace operation in operations.ts\n        replaceElement(element, operation.node);\n        return;\n    }\n\n    if (operation.type === UPDATE_OPERATION) {\n        // @ts-ignore trust me, check replace operation in operations.ts\n        updateElementAttributes(element, operation);\n\n        if (operation.childrenUpdater && operation.oldNode) {\n            // @ts-ignore TODO\n            applyChildrenDiff(\n                operation.oldNode._domElement,\n                operation.childrenUpdater,\n            );\n        }\n    }\n\n    return element;\n};\n\nexport const applyChildrenDiff = (\n    element: HTMLElement,\n    diffOperations: Operation[],\n) => {\n    let offset = 0;\n    for (let i = 0; i < diffOperations.length; ++i) {\n        if (diffOperations[i].type === SKIP_OPERATION) {\n            continue;\n        }\n        const childUpdater = diffOperations[i];\n        const childElem = element.childNodes[i + offset];\n\n        if (childUpdater.type === INSERT_OPERATION) {\n            childElem.appendChild(\n                createDomElement(\n                    // @ts-ignore trust me, check insert operation in operations.ts\n                    childUpdater.node.type,\n                    // @ts-ignore trust me, check insert operation in operations.ts\n                    childUpdater.node.props,\n                ),\n            );\n            continue;\n        }\n\n        if (childUpdater.type === REMOVE_OPERATION) {\n            childElem.remove();\n            offset -= 1;\n            continue;\n        }\n\n        // @ts-ignore TODO\n        applyDiff(childElem, childUpdater);\n    }\n};\n","import { ComponentClass } from './index';\r\nimport { rerenderComponent } from './renderComponent';\r\nimport { PropsType } from '../reacts-dom/common';\r\n\r\nexport class Component<P extends PropsType = {}, S = {}> extends ComponentClass<\r\n    P,\r\n    S\r\n> {\r\n    setState<K extends keyof S>(\r\n        update: (prevState: S, props?: Readonly<P>) => Pick<S, K> | S,\r\n        callback?: () => void,\r\n    ) {\r\n        // @ts-ignore\r\n        this.state = update(this.state);\r\n        console.log('setState called');\r\n\r\n        if (callback) {\r\n            callback();\r\n        }\r\n\r\n        rerenderComponent(this);\r\n    }\r\n}\r\n","import { Component } from './Component';\nimport { rerenderNode } from '../reacts-dom/render/rerenderNode';\nimport { COMPONENT_ELEMENT_SYMBOL, DOM_ELEMENT_SYMBOL } from '../shared/index';\n\nexport function rerenderComponent(component: Component<any, any>) {\n    if (component.rootDomRef && component.prevRenderVNodeRef) {\n        const VDomElement = component.render();\n        if (\n            VDomElement.$$typeof.description ===\n            COMPONENT_ELEMENT_SYMBOL.description\n        ) {\n            VDomElement._instance = component;\n        }\n        console.log(\n            component.rootDomRef,\n            component.prevRenderVNodeRef,\n            VDomElement,\n        );\n        rerenderNode(\n            component.rootDomRef,\n            component.prevRenderVNodeRef,\n            VDomElement,\n        );\n        component.prevRenderVNodeRef = VDomElement;\n    } else {\n        throw new Error(\n            `rootDomRef or prevRenderVNodeRef is empty. component: ${component}`,\n        );\n    }\n}\n","import { VNodeType } from '../common';\nimport { createDiff } from '../diff/createDiff';\nimport { SKIP_OPERATION, UPDATE_OPERATION } from '../diff/operations';\nimport { applyChildrenDiff, applyDiff } from '../diff/applyDiff';\n\nexport const rerenderNode = (\n    element: HTMLElement,\n    oldNode: VNodeType,\n    newNode: VNodeType,\n) => {\n    const diff = createDiff(oldNode, newNode);\n    let root = element;\n    console.log(diff);\n\n    if (diff.type === SKIP_OPERATION) {\n        return;\n    }\n\n    if (diff.type === UPDATE_OPERATION) {\n        if (oldNode._domElement) {\n            newNode._domElement = oldNode._domElement;\n            root = newNode._domElement;\n        }\n\n        const nodesArr: string | any[] | Node = [];\n        // @ts-ignore\n        console.log(diff);\n        applyChildrenDiff(root, diff.childrenUpdater);\n\n        // console.log(nodesArr, element);\n        // element.replaceChildren(...nodesArr);\n    }\n};\n","import {\n    ChildrenType,\n    JSXElementType,\n    KeyType,\n    PropsType,\n    VNodeType,\n} from '../reacts-dom/common';\nimport { COMPONENT_ELEMENT_SYMBOL, DOM_ELEMENT_SYMBOL } from '../shared/index';\n\n/**\n * Creates a virtual DOM element (virtual node) for (used for JSX)\n * @param type\n * @param props\n * @param maybeKey\n * @returns {{_children: null, _parent: null, _nextDom: undefined, _depth: number, construct: undefined, type, key, props, _instance: null}}\n */\nexport const createElement = (\n    type: JSXElementType,\n    props: PropsType & { children: ChildrenType },\n    maybeKey: KeyType | null | undefined,\n) => {\n    let key = maybeKey;\n    // let _props = {}\n\n    if (!key) {\n        key = Symbol('key');\n    }\n\n    return createVNode(type, props, key);\n};\n\n/**\n * Creates a VNode\n * @param type node type for this VDOM element. Name or Component constructor\n * @param props properties of virtual node\n * @param key\n */\nexport const createVNode = (\n    type: JSXElementType,\n    props: PropsType & { children: ChildrenType },\n    key: KeyType,\n): VNodeType => {\n    const vnode = {\n        $$typeof: COMPONENT_ELEMENT_SYMBOL,\n        type,\n        props,\n        key,\n    };\n\n    if (typeof type === 'string') {\n        vnode['$$typeof'] = DOM_ELEMENT_SYMBOL;\n    }\n\n    return vnode;\n};\n\nexport const Fragment = (props: PropsType) => {\n    return props.children;\n};\n","// TODO: Maybe add default props\nimport { createElement } from './createElement';\n\nconst jsx = (type, config, maybeKey) => {\n    return createElement(type, config, maybeKey);\n};\n\n// TODO\nconst jsxs = (type, config, maybeKey) => {\n    return createElement(type, config, maybeKey);\n};\n\nexport { jsx, jsxs };\n","import { ReactsElement } from './reacts/index';\nimport { Component } from './reacts/Component';\n\nexport default class Example extends Component<{}, { counter: number }> {\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            counter: 2,\n        };\n    }\n\n    render(): ReactsElement<{}> {\n        return (\n            <div className={'div'}>\n                <p key={1} className={'counter'}>{`${this.state.counter}`}</p>\n                <p key={2} className={'hello'}>\n                    Hello world!\n                </p>\n                <p key={3} className={'hello'}>\n                    Hello world!\n                </p>\n                <p key={4} className={'hello'}>\n                    Hello world!\n                </p>\n                <p key={5}>Hello world!</p>\n                <button\n                    key={6}\n                    onclick={() =>\n                        this.setState(state => ({\n                            ...state,\n                            counter: state.counter + 1,\n                        }))\n                    }\n                >\n                    Increment\n                </button>\n            </div>\n        );\n    }\n}\n\n// export default class Example {\n//     render() {\n//         return <div>Hello world!</div>;\n//     }\n// }\n","import { VNodeType } from '../common';\nimport { renderNode } from '../render/renderNode';\n\nexport interface RootType {\n    render(node: VNodeType): void;\n    unmount(): void;\n}\n\nclass Root implements RootType {\n    root: HTMLElement;\n    constructor(root: HTMLElement) {\n        this.root = root;\n    }\n\n    render(node: VNodeType): void {\n        renderNode(this.root, node);\n    }\n\n    unmount() {}\n}\n\nexport function createRoot(root: HTMLElement | null): RootType {\n    if (!root) {\n        throw new Error(`Root element: ${root}`);\n    }\n\n    return new Root(root);\n}\n","import Example from './Example';\r\nimport { createRoot } from './reacts-dom/root/index';\r\n\r\nconst root = createRoot(document.querySelector('#root'));\r\nroot.render(<Example />);\r\n"],"names":["ComponentClass","props","this","SKIP_OPERATION","UPDATE_OPERATION","REPLACE_OPERATION","REMOVE_OPERATION","INSERT_OPERATION","skip","type","update","attrUpdater","childrenUpdater","oldNode","replace","newNode","node","emptyAttrUpdate","remove","set","DOM_ELEMENT_SYMBOL","Symbol","COMPONENT_ELEMENT_SYMBOL","removeUntilKey","operations","oldChildren","key","push","shift","insertUntilKey","newChildren","findNextUpdateKey","oldChildrenWithKeys","newChildrenWithKeys","oldChildrenKeys","map","newChildrenKeys","find","k","indexOf","createDiff","$$typeof","description","attrUpdate","oldNodeProps","newNodeProps","oldNodeWithoutChildren","Object","entries","filter","attr","newNodeWithoutChildren","oldNodeAttrNames","newNodeAttrNames","value","length","children","isPrimitiveTypeChildren","console","log","comparePrimitiveTypeChildren","Array","isArray","Error","nextUpdateKey","childrenDiff","_instance","setAttributes","element","renderChildren","innerText","constructor","forEach","renderNode","renderComponentFirstTime","root","instance","rootDomRef","prevRenderVNodeRef","render","document","createElement","_domElement","appendChild","prototype","createDomElement","tagName","attributes","applyDiff","operation","removeAttribute","updateElementAttributes","applyChildrenDiff","newElement","replaceWith","replaceElement","diffOperations","offset","i","childUpdater","childElem","childNodes","Component","callback","state","component","diff","VDomElement","rerenderComponent","maybeKey","createVNode","vnode","jsx","config","Example","counter","className","onclick","setState","Root","createRoot","querySelector"],"sourceRoot":""}