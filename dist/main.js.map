{"version":3,"file":"main.js","mappings":"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","sources":["webpack://2022_2_technopanki/./packages/reacts/index.d.ts","webpack://2022_2_technopanki/./packages/reacts-dom/diff/operations.ts","webpack://2022_2_technopanki/./packages/shared/index.ts","webpack://2022_2_technopanki/./packages/reacts-dom/diff/childrenDiff.ts","webpack://2022_2_technopanki/./packages/reacts-dom/diff/createDiff.ts","webpack://2022_2_technopanki/./packages/reacts-dom/render/renderNode.ts","webpack://2022_2_technopanki/./packages/reacts-dom/utils.ts","webpack://2022_2_technopanki/./packages/reacts-dom/diff/applyDiff.ts","webpack://2022_2_technopanki/./packages/reacts/Component.ts","webpack://2022_2_technopanki/./packages/reacts/renderComponent.ts","webpack://2022_2_technopanki/./packages/reacts-dom/render/rerenderNode.ts","webpack://2022_2_technopanki/./packages/jsx-runtime/createElement.ts","webpack://2022_2_technopanki/./packages/jsx-runtime/index.js","webpack://2022_2_technopanki/./packages/Example.tsx","webpack://2022_2_technopanki/./packages/reacts-dom/root/index.ts","webpack://2022_2_technopanki/./packages/tess.tsx"],"sourcesContent":["// React Nodes\n// https://github.com/DefinitelyTyped/DefinitelyTyped/blob/e836acc75a78cf0655b5dfdbe81d69fdd4d8a252/types/react/index.d.ts#L162\n\n// React src\n// https://github.com/facebook/react/tree/main/packages/react\n\n//\n// VNode API\n// -------------------------------------------------------------------\nimport { ChildrenType, PropsType, VNodeType } from '../reacts-dom/common';\n\ntype ComponentChild = Exclude<ChildrenType, VNodeType[] | VNodeType> &\n    ReactsElement<any>;\ntype ComponentChildren = ComponentChild[] | ComponentChild;\n\nexport interface ReactsElement<P extends PropsType> extends VNodeType {\n    props: { children: ComponentChildren } & P;\n    _instance?: ComponentClass<P>;\n}\n\nexport abstract class ComponentClass<P extends PropsType = {}, S = {}> {\n    // fields\n    readonly props: Readonly<P>;\n    state: Readonly<S>;\n    context: unknown; // TODO\n\n    rootDomRef?: HTMLElement;\n    prevRenderVNodeRef?: VNodeType;\n    // refs: {\n    //     [key: string]: ComponentClass<P, S> | Element;\n    // };\n\n    // TODO: rework to queue maybe\n\n    // TODO static fields\n    static displayName?: string;\n    static defaultProps?: any;\n\n    // @ts-ignore\n    constructor(props: Readonly<P> | P) {\n        console.log('constructor called', props);\n        this.props = props;\n    }\n\n    // action methods\n    setState<K extends keyof S>(\n        /** Function for state update */\n        update: (prevState: S, props?: Readonly<P>) => Pick<S, K> | S,\n        callback?: () => void,\n    ): void;\n    // From https://github.com/DefinitelyTyped/DefinitelyTyped/blob/e836acc75a78cf0655b5dfdbe81d69fdd4d8a252/types/react/index.d.ts#L402\n    // // We MUST keep setState() as a unified signature because it allows proper checking of the method return type.\n    // // See: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/18365#issuecomment-351013257\n    // setState<K extends keyof S>(\n    //     state: | ((prevState: Readonly<S>, props: Readonly<P>,) => Pick<S, K> | Partial<S> | null) | (Pick<S, K> | Partial<S> | null),\n    //     callback?: () => void,\n    // ): void;\n\n    componentDidMount?(): void;\n    componentWillUnmount?(): void;\n    shouldComponentUpdate?(): boolean;\n\n    render(): ReactsElement<P>;\n}\n","import { AttributeUpdater, Operation } from './index';\nimport { VNodeType } from '../common';\n\nexport const SKIP_OPERATION = 'skip';\nexport const UPDATE_OPERATION = 'update';\nexport const REPLACE_OPERATION = 'replace';\nexport const REMOVE_OPERATION = 'remove';\nexport const INSERT_OPERATION = 'append';\n\nexport const skip = (): Operation => ({\n    type: SKIP_OPERATION,\n});\n\nexport const update = (\n    attrUpdater: AttributeUpdater,\n    childrenUpdater: Operation[],\n    oldNode: VNodeType,\n): Operation => ({\n    type: UPDATE_OPERATION,\n    attrUpdater,\n    childrenUpdater,\n    oldNode,\n});\n\nexport const replace = (newNode: VNodeType) => ({\n    type: REPLACE_OPERATION,\n    node: newNode,\n});\n\nexport const remove = () => ({\n    type: REMOVE_OPERATION,\n});\n\nexport const insert = (node: VNodeType) => ({\n    type: INSERT_OPERATION,\n    node,\n});\n\n//\n// Helper objects\n// ----------------------------------------------------\n\nexport const emptyAttrUpdate: AttributeUpdater = {\n    remove: [],\n    set: [],\n    update: [],\n};\n","export const KEY_SYMBOL = Symbol('key');\r\nexport const DOM_ELEMENT_SYMBOL = Symbol('dom');\r\nexport const COMPONENT_ELEMENT_SYMBOL = Symbol('component');\r\n","import { ChildrenType, KeyType, VNodeType } from '../common';\nimport { Operation } from './index';\nimport { emptyAttrUpdate, insert, remove, skip, update } from './operations';\nimport { createDiff } from './createDiff';\n\nconst removeUntilKey = (\n    operations: Operation[],\n    oldChildren: [KeyType, VNodeType][],\n    key: KeyType,\n) => {\n    while (oldChildren[0] && oldChildren[0][0] !== key) {\n        operations.push(remove());\n        oldChildren.shift();\n    }\n};\n\nconst insertUntilKey = (\n    operations: Operation[],\n    newChildren: [KeyType, VNodeType][],\n    key: KeyType,\n) => {\n    while (newChildren[0] && newChildren[0][0] !== key) {\n        operations.push(insert(newChildren[0][1]));\n        newChildren.shift();\n    }\n};\n\n// TODO: refactor\n// в данный момент мы каждый раз создаем доп массивы. Возможно можно сделать оптимальнее\nconst findNextUpdateKey = (\n    oldChildrenWithKeys: [KeyType, VNodeType][],\n    newChildrenWithKeys: [KeyType, VNodeType][],\n): KeyType => {\n    const oldChildrenKeys = oldChildrenWithKeys.map(node => node[0]);\n    const newChildrenKeys = newChildrenWithKeys.map(node => node[0]);\n\n    // return oldChildrenKeys.find(\n    //     k => newChildrenKeys.map(node => node[0]).indexOf(k[0]) !== -1,\n    // );\n\n    return (\n        oldChildrenKeys.find(\n            k =>\n                // @ts-ignore\n                newChildrenKeys.indexOf(k) !== -1,\n        ) || null\n    );\n};\n\nexport const childrenDiff = (\n    oldChildren: ChildrenType,\n    newChildren: ChildrenType,\n): Operation[] => {\n    const operations: Operation[] = [];\n\n    if (Array.isArray(oldChildren) && Array.isArray(newChildren)) {\n        const oldChildrenWithKeys = oldChildren.map(\n            (node: VNodeType): [KeyType, VNodeType] => [node.key, node],\n        );\n        const newChildrenWithKeys = newChildren.map(\n            (node: VNodeType): [KeyType, VNodeType] => [node.key, node],\n        );\n\n        let nextUpdateKey = findNextUpdateKey(\n            oldChildrenWithKeys,\n            newChildrenWithKeys,\n        );\n\n        while (nextUpdateKey) {\n            removeUntilKey(operations, oldChildrenWithKeys, nextUpdateKey);\n            insertUntilKey(operations, newChildrenWithKeys, nextUpdateKey);\n\n            operations.push(\n                createDiff(\n                    // @ts-ignore guaranteed to be an element\n                    oldChildrenWithKeys.shift()[1],\n                    // @ts-ignore guaranteed to be an element\n                    newChildrenWithKeys.shift()[1],\n                ),\n            );\n\n            nextUpdateKey = findNextUpdateKey(\n                oldChildrenWithKeys,\n                newChildrenWithKeys,\n            );\n        }\n\n        removeUntilKey(operations, oldChildrenWithKeys, nextUpdateKey);\n        insertUntilKey(operations, newChildrenWithKeys, nextUpdateKey);\n    } else {\n        throw new Error(`not array: ${oldChildren}, ${newChildren}`);\n    }\n\n    return operations;\n};\n","import { ChildrenType, ComponentType, PropsType, VNodeType } from '../common';\nimport { AttributeUpdater, Operation } from './index';\nimport { emptyAttrUpdate, replace, skip, update } from './operations';\nimport {\n    COMPONENT_ELEMENT_SYMBOL,\n    DOM_ELEMENT_SYMBOL,\n} from '../../shared/index';\nimport { childrenDiff } from './childrenDiff';\n\n// TODO: add list of attributes\nconst compareAttributes = (\n    oldNodeProps: PropsType,\n    newNodeProps: PropsType,\n): AttributeUpdater => {\n    const oldNodeWithoutChildren = Object.entries(oldNodeProps).filter(\n        ([attr, _]) => attr !== 'children',\n    );\n    const newNodeWithoutChildren = Object.entries(newNodeProps).filter(\n        ([attr, _]) => attr !== 'children',\n    );\n\n    const oldNodeAttrNames = oldNodeWithoutChildren.map(([attr, _]) => attr);\n    const newNodeAttrNames = newNodeWithoutChildren.map(([attr, _]) => attr);\n\n    return {\n        set: newNodeWithoutChildren.filter(\n            ([attr, _]) => oldNodeAttrNames.indexOf(attr) === -1,\n        ),\n        remove: oldNodeAttrNames.filter(\n            attr => newNodeAttrNames.indexOf(attr) === -1,\n        ),\n        update: newNodeWithoutChildren.filter(\n            ([attr, value]) =>\n                oldNodeAttrNames.indexOf(attr) !== -1 &&\n                oldNodeAttrNames.find(\n                    node => node[0] === attr && node[1] !== value,\n                ),\n        ),\n    };\n};\n\nconst isPrimitiveTypeChildren = (\n    oldNode: VNodeType,\n    newNode: VNodeType,\n): boolean => {\n    return (\n        (!oldNode.props.children && !oldNode.props.children) ||\n        (typeof oldNode.props.children === 'string' &&\n            typeof newNode.props.children === 'string')\n    );\n};\n\nconst comparePrimitiveTypeChildren = (\n    oldNode: VNodeType,\n    newNode: VNodeType,\n): Operation => {\n    // If both, oldChildren and newChildren are undefined or null\n    if (!oldNode.props.children && !oldNode.props.children) {\n        return skip();\n    }\n\n    console.log(oldNode.props.children, newNode.props.children);\n    if (\n        typeof oldNode.props.children === 'string' &&\n        typeof newNode.props.children === 'string'\n    ) {\n        if (oldNode.props.children === newNode.props.children) {\n            return skip();\n        } else {\n            return update(\n                {\n                    ...emptyAttrUpdate,\n                    update: [['textContent', newNode.props.children]],\n                },\n                [],\n                oldNode,\n            );\n        }\n    }\n\n    return skip();\n};\n\n// TODO: rework\n/**\n * Compares 2 VDom nodes and returns\n * the operation to be performed in the real one on this node in DOM\n * @param oldNode\n * @param newNode\n */\nexport const createDiff = (\n    oldNode: VNodeType,\n    newNode: VNodeType,\n): Operation => {\n    if (oldNode.$$typeof.description !== newNode.$$typeof.description) {\n        return replace(newNode);\n    }\n\n    if (\n        oldNode.$$typeof.description === DOM_ELEMENT_SYMBOL.description &&\n        newNode.$$typeof.description === DOM_ELEMENT_SYMBOL.description\n    ) {\n        const attrUpdate = compareAttributes(oldNode.props, newNode.props);\n\n        if (\n            attrUpdate.set.length == 0 &&\n            attrUpdate.remove.length == 0 &&\n            attrUpdate.update.length == 0 &&\n            oldNode.props.children === newNode.props.children\n        ) {\n            return skip();\n        }\n\n        if (isPrimitiveTypeChildren(oldNode, newNode)) {\n            return comparePrimitiveTypeChildren(oldNode, newNode);\n        }\n\n        if (\n            !Array.isArray(oldNode.props.children) &&\n            !Array.isArray(newNode.props.children)\n        ) {\n            return update(\n                attrUpdate,\n                [createDiff(oldNode.props.children, newNode.props.children)],\n                oldNode,\n            );\n        }\n\n        return update(\n            attrUpdate,\n            childrenDiff(oldNode.props.children, newNode.props.children),\n            oldNode,\n        );\n    } else if (\n        oldNode.$$typeof.description === COMPONENT_ELEMENT_SYMBOL.description &&\n        newNode.$$typeof.description === COMPONENT_ELEMENT_SYMBOL.description\n    ) {\n        console.log('Diff: ', oldNode, newNode);\n        if (oldNode.type !== newNode.type) {\n            return replace(newNode);\n        } else {\n            const attrUpdate = compareAttributes(oldNode.props, newNode.props);\n            if (\n                !Array.isArray(oldNode.props.children) &&\n                !Array.isArray(newNode.props.children)\n            ) {\n                return update(\n                    attrUpdate,\n                    [\n                        createDiff(\n                            oldNode.props.children,\n                            newNode.props.children,\n                        ),\n                    ],\n                    oldNode,\n                );\n            }\n            return update(\n                attrUpdate,\n                childrenDiff(oldNode.props.children, newNode.props.children),\n            );\n        }\n    } else {\n        throw new Error(\n            `Undefined type of node: ${oldNode.$$typeof}, ${newNode.$$typeof}`,\n        );\n    }\n\n    return skip();\n};\n","import {\n    ChildrenType,\n    ComponentType,\n    ConstructorType,\n    PropsType,\n    VNodeType,\n} from '../common';\nimport {\n    COMPONENT_ELEMENT_SYMBOL,\n    DOM_ELEMENT_SYMBOL,\n} from '../../shared/index';\n\n// TODO: rework to setAttributes\nexport const setAttributes = (element: HTMLElement, props: PropsType) => {\n    for (let attr in props) {\n        if (attr !== 'children') {\n            // @ts-ignore\n            element[attr] = props[attr];\n        }\n    }\n};\n\nconst renderChildren = (element: HTMLElement, children: ChildrenType) => {\n    if (children) {\n        if (typeof children === 'string') {\n            element.innerText = children;\n        } else if (children.constructor === Array) {\n            children.forEach((node: VNodeType) => {\n                renderNode(element, node);\n            });\n        } else {\n            // @ts-ignore we checked if node,props.children is VNodeType[]\n            renderNode(element, children);\n        }\n    }\n};\n\nconst renderComponentFirstTime = (\n    root: HTMLElement,\n    node: VNodeType & { type: ComponentType },\n): ComponentType => {\n    const instance = new node.type.prototype.constructor(node.props);\n\n    // Set instance fields\n    node._domElement = root;\n    instance.rootDomRef = root;\n    console.log(instance.render());\n    instance.prevRenderVNodeRef = instance.render();\n\n    renderNode(root, instance.prevRenderVNodeRef);\n    return instance;\n};\n\n/**\n * Renders virtual dome node inside root dom node\n * @param root\n * @param node\n */\nexport const renderNode = (root: HTMLElement, node: VNodeType) => {\n    if (node.$$typeof.description === DOM_ELEMENT_SYMBOL.description) {\n        // @ts-ignore node.type guaranteed to be typeof string\n        const element = document.createElement(node.type);\n        node._domElement = element;\n\n        setAttributes(element, node.props);\n        renderChildren(element, node.props.children);\n\n        root.appendChild(element);\n    } else if (\n        node.$$typeof.description === COMPONENT_ELEMENT_SYMBOL.description\n    ) {\n        renderComponentFirstTime(root, node);\n    }\n};\n","import { PropType } from './common';\nimport { setAttributes } from './render/renderNode';\n\nexport const createDomElement = (\n    tagName: string,\n    attributes: { [key: string]: PropType },\n): HTMLElement => {\n    const element = document.createElement(tagName);\n    setAttributes(element, attributes);\n    return element;\n};\n","import { AttributeUpdater, Operation } from './index';\nimport {\n    INSERT_OPERATION,\n    REMOVE_OPERATION,\n    REPLACE_OPERATION,\n    SKIP_OPERATION,\n    UPDATE_OPERATION,\n} from './operations';\nimport { setAttributes } from '../render/renderNode';\nimport { VNodeType } from '../common';\nimport { createDomElement } from '../utils';\n\nconst replaceElement = (\n    element: HTMLElement,\n    node: VNodeType & { type: string },\n) => {\n    const newElement = document.createElement(node.type);\n    setAttributes(newElement, node.props);\n    element.replaceWith(newElement);\n};\n\nconst updateElementAttributes = (\n    element: HTMLElement,\n    operation: Operation & {\n        type: string;\n        attrUpdater: AttributeUpdater;\n        childrenUpdater: Operation[];\n    },\n) => {\n    // TODO\n    operation.attrUpdater.set.forEach(\n        // @ts-ignore\n        ([attr, value]) => (element[attr] = value),\n    );\n    operation.attrUpdater.update.forEach(\n        // @ts-ignore\n        ([attr, value]) => (element[attr] = value),\n    );\n    operation.attrUpdater.remove.forEach(attr => element.removeAttribute(attr));\n};\n\nexport const applyDiff = (element: HTMLElement, operation: Operation) => {\n    console.log(operation);\n    if (operation.type === SKIP_OPERATION) {\n        return;\n    }\n\n    if (operation.type === REPLACE_OPERATION) {\n        // @ts-ignore trust me, check replace operation in operations.ts\n        replaceElement(element, operation.node);\n        return;\n    }\n\n    if (operation.type === UPDATE_OPERATION) {\n        // @ts-ignore trust me, check replace operation in operations.ts\n        updateElementAttributes(element, operation);\n\n        if (operation.childrenUpdater && operation.oldNode) {\n            // @ts-ignore TODO\n            applyChildrenDiff(element, operation.childrenUpdater);\n        }\n    }\n\n    return element;\n};\n\nexport const applyChildrenDiff = (\n    element: HTMLElement,\n    diffOperations: Operation[],\n) => {\n    let offset = 0;\n    for (let i = 0; i < diffOperations.length; ++i) {\n        if (diffOperations[i].type === SKIP_OPERATION) {\n            continue;\n        }\n        const childUpdater = diffOperations[i];\n        const childElem = element.childNodes[i + offset];\n\n        if (childUpdater.type === INSERT_OPERATION) {\n            childElem.appendChild(\n                createDomElement(\n                    // @ts-ignore trust me, check insert operation in operations.ts\n                    childUpdater.node.type,\n                    // @ts-ignore trust me, check insert operation in operations.ts\n                    childUpdater.node.props,\n                ),\n            );\n            continue;\n        }\n\n        if (childUpdater.type === REMOVE_OPERATION) {\n            childElem.remove();\n            offset -= 1;\n            continue;\n        }\n\n        // @ts-ignore TODO\n        applyDiff(childElem, childUpdater);\n    }\n};\n","import { ComponentClass } from './index';\nimport { rerenderComponent } from './renderComponent';\nimport { PropsType } from '../reacts-dom/common';\n\nexport class Component<P extends PropsType = {}, S = {}> extends ComponentClass<\n    P,\n    S\n> {\n    constructor(props: P | Readonly<P>) {\n        super(props);\n    }\n\n    setState<K extends keyof S>(\n        update: (prevState: S, props?: Readonly<P>) => Pick<S, K> | S,\n        callback?: () => void,\n    ) {\n        // @ts-ignore\n        this.state = update(this.state);\n        console.log('setState called');\n\n        if (callback) {\n            callback();\n        }\n\n        rerenderComponent(this);\n    }\n}\n","import { Component } from './Component';\nimport { rerenderNode } from '../reacts-dom/render/rerenderNode';\nimport { COMPONENT_ELEMENT_SYMBOL, DOM_ELEMENT_SYMBOL } from '../shared/index';\n\nexport function rerenderComponent(component: Component<any, any>) {\n    if (component.rootDomRef && component.prevRenderVNodeRef) {\n        const VDomElement = component.render();\n        console.log(VDomElement);\n        if (\n            VDomElement.$$typeof.description ===\n            COMPONENT_ELEMENT_SYMBOL.description\n        ) {\n            VDomElement._instance = component;\n        }\n        console.log(\n            component.rootDomRef,\n            component.prevRenderVNodeRef,\n            VDomElement,\n        );\n        rerenderNode(\n            component.rootDomRef,\n            component.prevRenderVNodeRef,\n            VDomElement,\n        );\n        component.prevRenderVNodeRef = VDomElement;\n    } else {\n        throw new Error(\n            `rootDomRef or prevRenderVNodeRef is empty. component: ${component}`,\n        );\n    }\n}\n","import { VNodeType } from '../common';\nimport { createDiff } from '../diff/createDiff';\nimport { SKIP_OPERATION, UPDATE_OPERATION } from '../diff/operations';\nimport { applyChildrenDiff, applyDiff } from '../diff/applyDiff';\n\nexport const rerenderNode = (\n    element: HTMLElement,\n    oldNode: VNodeType,\n    newNode: VNodeType,\n) => {\n    const diff = createDiff(oldNode, newNode);\n    applyDiff(element, diff);\n    // let root = element;\n    // console.log(diff);\n    //\n    // if (diff.type === SKIP_OPERATION) {\n    //     return;\n    // }\n    //\n    // if (diff.type === UPDATE_OPERATION) {\n    //     if (oldNode._domElement) {\n    //         newNode._domElement = oldNode._domElement;\n    //         root = newNode._domElement;\n    //     }\n    //\n    //     const nodesArr: string | any[] | Node = [];\n    //     // @ts-ignore\n    //     console.log(diff);\n    //     applyChildrenDiff(root, diff.childrenUpdater);\n\n    // console.log(nodesArr, element);\n    // element.replaceChildren(...nodesArr);\n};\n","import {\n    ChildrenType,\n    JSXElementType,\n    KeyType,\n    PropsType,\n    VNodeType,\n} from '../reacts-dom/common';\nimport {\n    COMPONENT_ELEMENT_SYMBOL,\n    DOM_ELEMENT_SYMBOL,\n    KEY_SYMBOL,\n} from '../shared/index';\n\n/**\n * Creates a virtual DOM element - virtual node. Used for JSX\n * @param type\n * @param props\n * @param maybeKey\n * @returns {{_children: null, _parent: null, _nextDom: undefined, _depth: number, construct: undefined, type, key, props, _instance: null}}\n */\nexport const createElement = (\n    type: JSXElementType,\n    props: PropsType & { children: ChildrenType },\n    maybeKey: KeyType | null | undefined,\n): VNodeType => {\n    const vnode: VNodeType = {\n        $$typeof:\n            typeof type === 'string'\n                ? DOM_ELEMENT_SYMBOL\n                : COMPONENT_ELEMENT_SYMBOL,\n        type,\n        props,\n        key: !maybeKey ? KEY_SYMBOL : maybeKey,\n    };\n\n    if (vnode.$$typeof.description === COMPONENT_ELEMENT_SYMBOL.description) {\n        // @ts-ignore trust me, vnode type = ComponentConstructor\n        vnode._instance = new vnode.type.prototype.constructor(props);\n        vnode.props.children = vnode._instance?.render();\n    }\n\n    return vnode;\n};\n\nexport const Fragment = (props: PropsType) => {\n    return props.children;\n};\n","// TODO: Maybe add default props\nimport { createElement } from './createElement';\n\nconst jsx = (type, config, maybeKey) => {\n    console.log('config: ', config);\n    return createElement(type, config, maybeKey);\n};\n\n// TODO\nconst jsxs = (type, config, maybeKey) => {\n    return createElement(type, config, maybeKey);\n};\n\nexport { jsx, jsxs };\n","import { ReactsElement } from './reacts/index';\nimport { Component } from './reacts/Component';\n\nclass NewExample extends Component<{ counter: number; setState: Function }> {\n    constructor(\n        props:\n            | { counter: number; setState: Function }\n            | Readonly<{ counter: number; setState: Function }>,\n    ) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className={'div'}>\n                <p key={1} className={'counter'}>{`${this.props.counter}`}</p>\n                <p key={2} className={'hello'}>\n                    Hello world!\n                </p>\n                <p key={3} className={'hello'}>\n                    Hello world!\n                </p>\n                <p key={4} className={'hello'}>\n                    Hello world!\n                </p>\n                <p key={5}>Hello world!</p>\n                <button key={6} onclick={this.props.setState}>\n                    Increment\n                </button>\n            </div>\n        );\n    }\n}\n\nexport default class Example extends Component<{}, { counter: number }> {\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            counter: 2,\n        };\n    }\n\n    render(): ReactsElement<{}> {\n        return (\n            <div>\n                <NewExample\n                    counter={this.state.counter}\n                    setState={() => {\n                        console.log('set state called');\n                        this.setState(state => ({\n                            ...state,\n                            counter: state.counter + 1,\n                        }));\n                    }}\n                />\n            </div>\n        );\n    }\n}\n\n// export default class Example {\n//     render() {\n//         return <div>Hello world!</div>;\n//     }\n// }\n","import { VNodeType } from '../common';\nimport { renderNode } from '../render/renderNode';\n\nexport interface RootType {\n    render(node: VNodeType): void;\n    unmount(): void;\n}\n\nclass Root implements RootType {\n    root: HTMLElement;\n    constructor(root: HTMLElement) {\n        this.root = root;\n    }\n\n    render(node: VNodeType): void {\n        renderNode(this.root, node);\n    }\n\n    unmount() {}\n}\n\nexport function createRoot(root: HTMLElement | null): RootType {\n    if (!root) {\n        throw new Error(`Root element: ${root}`);\n    }\n\n    return new Root(root);\n}\n","import Example from './Example';\r\nimport { createRoot } from './reacts-dom/root/index';\r\n\r\nconst root = createRoot(document.querySelector('#root'));\r\nroot.render(<Example />);\r\n"],"names":["ComponentClass","props","console","log","this","SKIP_OPERATION","UPDATE_OPERATION","REPLACE_OPERATION","REMOVE_OPERATION","INSERT_OPERATION","skip","type","update","attrUpdater","childrenUpdater","oldNode","replace","newNode","node","emptyAttrUpdate","remove","set","KEY_SYMBOL","Symbol","DOM_ELEMENT_SYMBOL","COMPONENT_ELEMENT_SYMBOL","removeUntilKey","operations","oldChildren","key","push","shift","insertUntilKey","newChildren","findNextUpdateKey","oldChildrenWithKeys","newChildrenWithKeys","oldChildrenKeys","map","newChildrenKeys","find","k","indexOf","childrenDiff","Array","isArray","Error","nextUpdateKey","createDiff","compareAttributes","oldNodeProps","newNodeProps","oldNodeWithoutChildren","Object","entries","filter","attr","newNodeWithoutChildren","oldNodeAttrNames","newNodeAttrNames","value","$$typeof","description","attrUpdate","length","children","isPrimitiveTypeChildren","comparePrimitiveTypeChildren","setAttributes","element","renderNode","root","document","createElement","_domElement","innerText","constructor","forEach","renderChildren","appendChild","instance","prototype","rootDomRef","render","prevRenderVNodeRef","renderComponentFirstTime","createDomElement","tagName","attributes","applyDiff","operation","removeAttribute","updateElementAttributes","applyChildrenDiff","newElement","replaceWith","replaceElement","diffOperations","offset","i","childUpdater","childElem","childNodes","Component","callback","state","component","diff","VDomElement","_instance","rerenderComponent","maybeKey","vnode","jsx","config","NewExample","className","counter","onclick","setState","Example","Root","createRoot","querySelector"],"sourceRoot":""}