{"version":3,"file":"main.js","mappings":"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","sources":["webpack://2022_2_technopanki/./packages/reacts/index.d.ts","webpack://2022_2_technopanki/./packages/shared/index.ts","webpack://2022_2_technopanki/./packages/reacts-dom/render/index.ts","webpack://2022_2_technopanki/./packages/reacts/renderComponent.ts","webpack://2022_2_technopanki/./packages/reacts/Component.ts","webpack://2022_2_technopanki/./packages/reacts-dom/render/createElement.ts","webpack://2022_2_technopanki/./packages/jsx-runtime/index.js","webpack://2022_2_technopanki/./packages/Example.tsx","webpack://2022_2_technopanki/./packages/reacts-dom/root/index.ts","webpack://2022_2_technopanki/./packages/tess.tsx"],"sourcesContent":["// React Nodes\n// https://github.com/DefinitelyTyped/DefinitelyTyped/blob/e836acc75a78cf0655b5dfdbe81d69fdd4d8a252/types/react/index.d.ts#L162\n\n// React src\n// https://github.com/facebook/react/tree/main/packages/react\n\n//\n// VNode API\n// -------------------------------------------------------------------\nimport {\n    ChildrenType,\n    ComponentType,\n    PropsType,\n    VNodeType,\n} from '../reacts-dom/common';\n\ntype ComponentChild = Exclude<ChildrenType, VNodeType[] | VNodeType> &\n    ReactsElement<any>;\ntype ComponentChildren = ComponentChild[] | ComponentChild;\n\n/**\n * VDOM type interface\n */\nexport interface ReactsElement<P extends PropsType> extends VNodeType {\n    props: { children: ComponentChildren } & P;\n    _instance?: ComponentClass<P>;\n}\n\n//\n// Component API\n// -------------------------------------------------------------------\n\ninterface ComponentLifecycle<P, S> {\n    /**\n     * @deprecated\n     */\n    componentWillMount?(): void;\n\n    componentDidMount?(): void;\n    componentWillUnmount?(): void;\n    shouldComponentUpdate?(): boolean;\n}\n\n//\n// ComponentClass API\n// -------------------------------------------------------------------\n\n// interface Component<P = {}, S = {}> extends ComponentLifecycle<P, S> {}\n\nexport abstract class ComponentClass<P extends PropsType = {}, S = {}>\n    implements ComponentLifecycle<P, S>, ComponentType\n{\n    // fields\n    readonly props: Readonly<P>;\n    state: Readonly<S>;\n    context: unknown; // TODO\n    domRef?: HTMLElement;\n    // refs: {\n    //     [key: string]: ComponentClass<P, S> | Element;\n    // };\n\n    // TODO: rework to queue maybe\n\n    // TODO static fields\n    static displayName?: string;\n    static defaultProps?: any;\n\n    // @ts-ignore\n    constructor(props: Readonly<P> | P) {\n        this.props = props;\n    }\n\n    // action methods\n    setState<K extends keyof S>(\n        /** Function for state update */\n        update: (prevState: S, props?: Readonly<P>) => Pick<S, K> | S | null,\n        callback?: () => void,\n    ): void;\n    // From https://github.com/DefinitelyTyped/DefinitelyTyped/blob/e836acc75a78cf0655b5dfdbe81d69fdd4d8a252/types/react/index.d.ts#L402\n    // // We MUST keep setState() as a unified signature because it allows proper checking of the method return type.\n    // // See: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/18365#issuecomment-351013257\n    // setState<K extends keyof S>(\n    //     state: | ((prevState: Readonly<S>, props: Readonly<P>,) => Pick<S, K> | Partial<S> | null) | (Pick<S, K> | Partial<S> | null),\n    //     callback?: () => void,\n    // ): void;\n\n    componentDidMount?(): void;\n\n    render(): ReactsElement<P>;\n}\n","export const KEY_SYMBOL = Symbol('key');\nexport const DOM_ELEMENT_SYMBOL = Symbol('dom');\nexport const COMPONENT_ELEMENT_SYMBOL = Symbol('component');\n","import {\n    ChildrenType,\n    ComponentType,\n    ConstructorType,\n    PropsType,\n    VNodeType,\n} from '../common';\nimport {\n    COMPONENT_ELEMENT_SYMBOL,\n    DOM_ELEMENT_SYMBOL,\n} from '../../shared/index';\n\n// TODO: rework to setAttributes\nconst setAttributes = (element: HTMLElement, props: PropsType) => {\n    for (let attr in props) {\n        if (attr !== 'children') {\n            // @ts-ignore\n            element[attr] = props[attr];\n        }\n    }\n};\n\nconst renderChildren = (element: HTMLElement, children: ChildrenType) => {\n    if (children) {\n        if (typeof children === 'string') {\n            element.innerText = children;\n        } else if (children.constructor === Array) {\n            children.forEach((node: VNodeType) => {\n                renderNode(element, node);\n            });\n        } else {\n            // @ts-ignore we checked if node,props.children is VNodeType[]\n            renderNode(element, children);\n        }\n    }\n};\n\nconst renderComponentFirstTime = (\n    root: HTMLElement,\n    constructor: ConstructorType<any>,\n): ComponentType => {\n    const instance = new constructor();\n    instance.domRef = root;\n    renderNode(root, instance.render());\n    return instance;\n};\n\n/**\n * Renders virtual dome node inside root dom node\n * @param root\n * @param node\n */\nexport const renderNode = (root: HTMLElement, node: VNodeType) => {\n    if (node.$$typeof.description === DOM_ELEMENT_SYMBOL.description) {\n        // @ts-ignore node.type guaranteed to be typeof string\n        const element = document.createElement(node.type);\n\n        setAttributes(element, node.props);\n        renderChildren(element, node.props.children);\n\n        root.appendChild(element);\n    } else if (\n        node.$$typeof.description === COMPONENT_ELEMENT_SYMBOL.description\n    ) {\n        if (node._instance) {\n            if (node._instance.domRef) {\n                renderNode(node._instance.domRef, node._instance.render());\n            } else {\n                throw new Error('node._instance._baseElement is empty');\n            }\n        } else {\n            node._instance = renderComponentFirstTime(\n                root,\n                // @ts-ignore node.type guaranteed to be typeof ComponentType\n                node.type.prototype.constructor,\n            );\n        }\n    }\n};\n\nexport const rerenderElement = (element: HTMLElement, node: VNodeType) => {\n    if (node.$$typeof.description === DOM_ELEMENT_SYMBOL.description) {\n        // @ts-ignore node.type guaranteed to be typeof string\n        const tempElement = document.createElement(node.type);\n        renderChildren(tempElement, node.props.children);\n        element.replaceChildren(tempElement);\n    } else {\n        if (node._instance) {\n            rerenderElement(element, node._instance.render());\n        } else {\n            throw new Error(\n                `rerenderElement error: node._instance is empty: ${node}`,\n            );\n        }\n    }\n};\n","import { Component } from './Component';\nimport { renderNode, rerenderElement } from '../reacts-dom/render/index';\n\nexport function rerenderComponent(component: Component<any, any>) {\n    console.log(component);\n    if (component.domRef) {\n        const VDomElement = component.render();\n        VDomElement._instance = component;\n        rerenderElement(component.domRef, VDomElement);\n    } else {\n        throw new Error(\n            `domRef = ${component.domRef}; component: ${component}`,\n        );\n    }\n}\n","import { ComponentClass } from './index';\nimport { rerenderComponent } from './renderComponent';\n\nexport class Component<P, S> extends ComponentClass<P, S> {\n    setState<K extends keyof S>(\n        update: (prevState: S, props?: Readonly<P>) => Pick<S, K> | S,\n        callback?: () => void,\n    ) {\n        // @ts-ignore\n        this.state = update(this.state);\n        console.log('setState called');\n\n        if (callback) {\n            callback();\n        }\n\n        rerenderComponent(this);\n    }\n}\n","import {\n    ChildrenType,\n    JSXElementType,\n    KeyType,\n    PropsType,\n    VNodeType,\n} from '../common';\nimport {\n    COMPONENT_ELEMENT_SYMBOL,\n    DOM_ELEMENT_SYMBOL,\n} from '../../shared/index';\n\n/**\n * Creates a virtual DOM element (virtual node) for (used for JSX)\n * @param type\n * @param props\n * @param maybeKey\n * @returns {{_children: null, _parent: null, _nextDom: undefined, _depth: number, construct: undefined, type, key, props, _instance: null}}\n */\nexport const createElement = (\n    type: JSXElementType,\n    props: PropsType & { children: ChildrenType },\n    maybeKey: KeyType | null | undefined,\n) => {\n    let key = maybeKey;\n    // let _props = {}\n\n    if (!key) {\n        key = Symbol('key');\n    }\n\n    return createVNode(type, props, key);\n};\n\n/**\n * Creates a VNode\n * @param type node type for this VDOM element. Name or Component constructor\n * @param props properties of virtual node\n * @param key\n */\nexport const createVNode = (\n    type: JSXElementType,\n    props: PropsType & { children: ChildrenType },\n    key: KeyType,\n): VNodeType => {\n    const vnode = {\n        $$typeof: COMPONENT_ELEMENT_SYMBOL,\n        type,\n        props,\n        key,\n    };\n\n    if (typeof type === 'string') {\n        vnode['$$typeof'] = DOM_ELEMENT_SYMBOL;\n    }\n\n    return vnode;\n};\n\nexport const Fragment = (props: PropsType) => {\n    return props.children;\n};\n","// TODO: Maybe add default props\nimport { createElement } from '../reacts-dom/render/createElement';\n\nconst jsx = (type, config, maybeKey) => {\n    return createElement(type, config, maybeKey);\n};\n\n// TODO\nconst jsxs = (type, config, maybeKey) => {\n    return createElement(type, config, maybeKey);\n};\n\nexport { jsx, jsxs };\n","import { ReactsElement } from './reacts/index';\nimport { Component } from './reacts/Component';\n\nexport default class Example extends Component<any, any> {\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            counter: 2,\n        };\n    }\n\n    render(): ReactsElement {\n        return (\n            <div className={'div'}>\n                <p className={'counter'}>{`${this.state.counter}`}</p>\n                <p className={'hello'}>Hello world!</p>\n                <p className={'hello'}>Hello world!</p>\n                <p className={'hello'}>Hello world!</p>\n                <p>Hello world!</p>\n                <button\n                    onclick={() =>\n                        this.setState(state => ({\n                            ...state,\n                            counter: state.counter + 1,\n                        }))\n                    }\n                >\n                    Increment\n                </button>\n            </div>\n        );\n    }\n}\n\n// export default class Example {\n//     render() {\n//         return <div>Hello world!</div>;\n//     }\n// }\n","import { VNodeType } from '../common';\nimport { renderNode } from '../render/index';\n\nexport interface RootType {\n    render(node: VNodeType): void;\n    unmount(): void;\n}\n\nclass Root implements RootType {\n    root: Element;\n    constructor(root: Element) {\n        this.root = root;\n    }\n\n    render(node: VNodeType): void {\n        renderNode(this.root, node);\n    }\n\n    unmount() {}\n}\n\nexport function createRoot(root: Element | null): RootType {\n    if (!root) {\n        throw new Error(`Root element: ${root}`);\n    }\n\n    return new Root(root);\n}\n","import Example from './Example';\nimport { createRoot } from './reacts-dom/root/index';\n\nconst root = createRoot(document.querySelector('#root'));\nroot.render(<Example />);\n"],"names":["ComponentClass","props","this","DOM_ELEMENT_SYMBOL","Symbol","COMPONENT_ELEMENT_SYMBOL","renderChildren","element","children","innerText","constructor","Array","forEach","node","renderNode","renderComponentFirstTime","root","instance","domRef","render","$$typeof","description","document","createElement","type","attr","setAttributes","appendChild","_instance","Error","prototype","rerenderElement","tempElement","replaceChildren","rerenderComponent","component","console","log","VDomElement","maybeKey","key","createVNode","vnode","jsx","config","Example","state","counter","className","onclick","setState","update","callback","Root","createRoot","querySelector"],"sourceRoot":""}